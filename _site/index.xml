<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>FPFortkamp.com</title>
<link>https://fpfortkamp.com/</link>
<atom:link href="https://fpfortkamp.com/index.xml" rel="self" type="application/rss+xml"/>
<description>F√°bio P. Fortkamp&#39;s professional website</description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Fri, 21 Jun 2024 03:00:00 GMT</lastBuildDate>
<item>
  <title>IDE or Neovim - why not both?</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/ide/</link>
  <description><![CDATA[ 





<p>It‚Äôs not a secret that I love <a href="../../post/pyright/">Neovim</a>. Using a terminal-based, powerful editor allows me to write new code very fast, allowing myself to get into a state of flow and transfering my ideas to the code. With its powerful motions, shortcuts, and LSP support, I can quickly add new functions, move things around, indent and outdent code (particularly relevant for Python code). And using side-by-side with tmux, I can edit some code, switch to the terminal and run some tests, go back to the code for more editing‚Ä¶</p>
<p>And yet, today was one of those days in which I worked only in an IDE. PyCharm, to be more specific.</p>
<p>I don‚Äôt know if I can pinpoint exactly which I use both Neovim and an IDE. Partly is to get some novelty and break out of boredom, for sure. But I‚Äôm realizing that these code-editing programs have different purposes:</p>
<p><strong>The F√°bio Fortkamp theory of code editors:</strong></p>
<ul>
<li>Neovim (or any regular text editor) is for <em>adding new code</em></li>
<li>IDEs are for <em>refactoring and structuring existing code</em></li>
</ul>
<p>I love the automated refactoring capabilities of the JetBrains IDEs. Yes, there‚Äôs a <a href="https://github.com/ThePrimeagen/refactoring.nvim">refactoring plugin by the legend himself</a>, but when in this headspace I just want to use the mouse, you know? Open a file in the file explorer, select some text, pause and think about, see the options in a menu - in short, have the IDE guide me.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/ide/pycharm.png" class="img-fluid figure-img"></p>
<figcaption>Selecting an automated refactoring in PyCharm</figcaption>
</figure>
</div>
<p>There‚Äôs a more subtle effect that I find it even harder to describe, and it was something that was reminded to me in my morning run listening to this <a href="https://www.relay.fm/mpu/742">MPU episode</a> when Neil Jhaveri was talking the very symbolic moment when he sat down and created the XCode project for Apple Notes. Yes, with tmux sessions you can delimit the context in which you are working, with each pane or window pointing to a specific folder, and when you are done you simply detach from a session, but for me opening a PyCharm IDE has a very strong meaning: <em>for the next hour and a half, I‚Äôm working on this big Python project that need automated editing</em>.</p>
<p>So yes, I use Neovim all the time; I have my <a href="https://github.com/fabiofortkamp/astroconfig">config</a>, I use beautiful <a href="https://catppuccin.com/">themes</a>, I follow <a href="https://www.youtube.com/@typecraft_dev">the</a> <a href="https://www.youtube.com/@dreamsofcode">right</a> <a href="https://www.youtube.com/@teej_dv">NeoVim</a> <a href="https://www.youtube.com/@TheVimeagen">creators</a>. But this is not a cult, and I like to keep my IDE ready when I need it.</p>



 ]]></description>
  <category>Articles</category>
  <guid>https://fpfortkamp.com/post/ide/</guid>
  <pubDate>Fri, 21 Jun 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Higher productivity for developers with Starship</title>
  <link>https://fpfortkamp.com/post/starship/</link>
  <description><![CDATA[ 





<p>If you follow the internet trends around tools for developers, you might have heard of <a href="https://starship.rs/">Starship</a>, a tool that gives useful information quickly for higher productivity for developers.</p>
<p>At first, I got the feeling that Startship is more cosmetic than anything else, but after a few weeks working with it, I noticed that it is indeed a <em>productivity</em> tool in the original sense: low effort, high speed gains in the day-to-day workflow.</p>
<section id="a-typical-problem-that-starship-solves" class="level2">
<h2 class="anchored" data-anchor-id="a-typical-problem-that-starship-solves">A typical problem that Starship solves</h2>
<p>By day, I write mostly Python code, and the tricky thing that people forget is that there is no Python - there are Pythons. Each new Python 3.X version introduces several new features and might break some APIs from other 3.X versions. If I write code for Python 3.12, colleagues of mine that not so tech-savy and have only Python 3.10 in their machines would not be able to use my tools.</p>
<p>A similar problem occur for package versions: different clients use different versions of my company‚Äôs products, so when debugging I need to be sure of running the correct version.</p>
<p>Enter Starship. When prototyping an application this morning, this is the prompt I got:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~/newapp</span> on ÓÇ† main <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> is üì¶ v0.1.0 via üêç v3.11.8 took 4s</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚ûú</span></span></code></pre></div>
<p>This tells me immediately that:</p>
<ol type="1">
<li><p>I‚Äôm on the <code>newapp</code> root directory</p></li>
<li><p>I‚Äôm on the main branch</p></li>
<li><p>There is at least one untracked file in git</p></li>
<li><p>The package version 0.1.0</p></li>
<li><p>I‚Äôm not in an activated virtual environment, but am running Python 3.11.8</p></li>
<li><p>The previous command tool 4 seconds to run</p></li>
</ol>
<p>Everything substantial that I would do, like activating an environment or bumping up the package version, would reflect immediately in the prompt.</p>
<p>When I switch projects to <a href="https://obsessedwithprogramming.com/studying-go/">use Go</a> for a new CLI tool that I‚Äôm building, now I see this:</p>
<pre class="shell"><code>~/awesome-go-cli on ÓÇ† main via üêπ v1.21.6</code></pre>
<p>and now my brain notices the new animal and knows that I need to think statically-typed.</p>
</section>
<section id="productivity-for-developers-easy-to-setup-powerful-results" class="level2">
<h2 class="anchored" data-anchor-id="productivity-for-developers-easy-to-setup-powerful-results">Productivity for developers: easy to setup, powerful results</h2>
<p>Of course real nerds would set it up with shell variables in the profile and RC files. The real productivity leap is that configuration is minimal:</p>
<ol type="1">
<li><p>Install Starship with the official <a href="https://starship.rs/guide/">guide</a></p></li>
<li><p>Create your configuration in <code>~/.config/starship.toml</code>. Everything you saw above is built-in: there is the entirety of my configuration with comments:</p></li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the '‚ùØ' symbol in the prompt with '‚ûú'</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[character]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name of the module we are configuring is 'character'</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The 'success_symbol' segment is being set to '‚ûú' with the color 'bold green'</span></span>
<span id="cb3-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">success_symbol</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">[‚ûú](bold green)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb3-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">error_symbol</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">[‚ûú](bold red)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[c]</span></span>
<span id="cb3-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">symbol</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Óòû "</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[directory]</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the default is to truncate the full path in the prompt</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this increases the number of subdirectories before truncation happens</span></span>
<span id="cb3-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">read_only</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" Û∞åæ"</span></span>
<span id="cb3-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">truncation_length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb3-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">truncation_symbol</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..."</span></span>
<span id="cb3-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">truncate_to_repo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb3-18"></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[docker_context]</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I rarely use Docker but when I do, I find the Docker additions distracting</span></span>
<span id="cb3-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">disabled</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>The TOML file is based on <a href="https://starship.rs/config/">modules</a> that you customize individually. Notice I did not have to change nor the Python nor the Go modules.</p>
<p>Do you use any shell prompt like this? Leave suggestions for similar productivity tools in the comments!</p>


</section>

 ]]></description>
  <category>blog</category>
  <guid>https://fpfortkamp.com/post/starship/</guid>
  <pubDate>Mon, 08 Apr 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Software Development Book Review: Writing Interpreters in Go</title>
  <link>https://fpfortkamp.com/post/interpreters/</link>
  <description><![CDATA[ 





<p><a href="https://obsessedwithprogramming.com/monkey/">A couple of weeks ago</a>, I mentioned <em><a href="https://interpreterbook.com/">Writing Interpreters in Go</a></em>, a book that teaches you to write an interpreters for the Monkey programming language. If you write software for a living, you should study this book. <strong>This is a <em>software development book</em> more than an <em>interpreters book</em> that has much to teach.</strong></p>
<section id="an-overview-of-the-book" class="level2">
<h2 class="anchored" data-anchor-id="an-overview-of-the-book">An overview of the book</h2>
<p><em>Writing Interpreters in Go</em> is incredibly well written. The structure is sound, with medium-sized chapters, each one of them focusing on one major task of an interpreter:</p>
<ol type="1">
<li><p><em>Lexing</em>, reading a program as a string and making sense of each character to produce <em>tokens.</em> For instance: ‚Äúif the current character, than all numbers up to the next whitespace is an integer‚Äù;</p></li>
<li><p><em>Parsing</em>, where you combine tokens into an abstract syntax tree (the famous AST)</p></li>
<li><p><em>Evaluating</em>, where you use the host language (in this case, Go) to convert a ‚ÄúInfix Plus operation a+b‚Äù from the AST into an actual instruction <code>a+b</code>.</p></li>
</ol>
<p>There are also chapters on extending the language from the initial implementation and on defining macros (this is really advanced stuff).</p>
</section>
<section id="differences-between-programming-books-and-software-development-books" class="level2">
<h2 class="anchored" data-anchor-id="differences-between-programming-books-and-software-development-books">Differences between programming books and software development books</h2>
<p>I‚Äôm at a stage in my carrer that I do not need to <em>programming books</em>, I need <em>software development books.</em> I consider the Go syntax actually quite simple, and appraise the author Thorsten Ball for not wasting time on that. He focuses on the much important issues of program organization, like creating separate modules for each major task. He create modules for the business logic, goes one level up to define a loop that reads input and applies that logic (<a href="https://obsessedwithprogramming.com/studying-go/">parametrizing the I/O</a>), and then create a <code>main</code> module to present this loop to the screen.</p>
<p>I also like how he defines tests very carefully, and is not afraid of testing edge cases. Is it just me, or that are too many testing tutorials with <code>assert 1 + 1 == 2</code>?</p>
</section>
<section id="key-takeaways-from-the-book" class="level2">
<h2 class="anchored" data-anchor-id="key-takeaways-from-the-book">Key takeaways from the book</h2>
<ol type="1">
<li><p>When thinking about a concept, start by creating small data structures, like structs, enums or classes. Codify in the program what‚Äôs on your head;</p></li>
<li><p>Write tests to define what you want from those data structures, and use the same inputs as the user. If your program takes a filename as an input, then the test should get the filename as an input. This tells you how hard is to actually use your program;</p></li>
<li><p>Don‚Äôt be afraid of going to the old-fashioned literature of papers and books. The major algorithm from <em>Writing Interpreters in Go</em>, a modern book about a modern language, comes from a paper from the 70s.</p></li>
</ol>
<p>Have you read this book? What do you think?</p>


</section>

 ]]></description>
  <category>book-recommendations</category>
  <category>learning-interpreters-and-compilers</category>
  <guid>https://fpfortkamp.com/post/interpreters/</guid>
  <pubDate>Fri, 05 Apr 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Studying Go to get better at Python: reader and writer interfaces</title>
  <link>https://fpfortkamp.com/post/go/</link>
  <description><![CDATA[ 





<p>In my day job, I mainly write Python code, but I dedicate a good amount of time to <a href="https://obsessedwithprogramming.com/monkey/">studying the Go programming language.</a> Here‚Äôs one good example that shows why it‚Äôs so useful.</p>
<section id="the-importance-of-thinking-about-io" class="level2">
<h2 class="anchored" data-anchor-id="the-importance-of-thinking-about-io">The importance of thinking about IO</h2>
<p>The kind of programs I write are command line applications that take some specification file in and produce an output file with simulation results; both input and output files are JSON files. I develop these programs for our clients, but I also use them for our own analysis and research. That means that I‚Äôm always writing more and more scripts and that analyze the input and output data our main software consumes. The question: how can I add flexibility to this? How can I choose to save the output JSON object to a file, or to the terminal for some quick checking, or to some in-memory object for testing?</p>
<p><strong>I‚Äôve never seen this type of discussion in Python literature - in fact, before studying Go books, I rarely though of that problem, and had my programs always read from and write to disk files.</strong> This is simple, but make testing more cumbersone (I have to always create and delete temporary files) and inefficient.</p>
</section>
<section id="studying-go-reader-and-writer-interfaces" class="level2">
<h2 class="anchored" data-anchor-id="studying-go-reader-and-writer-interfaces">Studying Go: reader and writer interfaces</h2>
<p>But Go books are full of examples that use <a href="https://go.dev/tour/methods/21">Reader</a> and <a href="https://yourbasic.org/golang/io-writer-interface-explained/">Writer</a> interfaces. Here‚Äôs some sample (and incomplete) code from one of the example programs of the excelent <em><a href="https://pragprog.com/titles/rggo/powerful-command-line-applications-in-go/">Powerful Command Line Applications with Go</a></em>: a function that takes a filename, open that filename for processing, saves the processed data to a temporary file, and writes the path of that file to a <em>Writer</em> interface <code>out</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode go code-with-copy"><code class="sourceCode go"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//main.go</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filename <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> out io<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Writer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">error</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read all the data from the input file and check for errors </span></span>
<span id="cb1-5">  input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> ioutil<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ReadFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">nil</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> err </span>
<span id="cb1-8">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-9">  </span>
<span id="cb1-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// create a temporary file to store processed data</span></span>
<span id="cb1-11">  temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> ioutil<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>TempFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mdp*.html"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span>
<span id="cb1-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">nil</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> err </span>
<span id="cb1-14">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-15">  </span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// do some processing with input and save to temp</span></span>
<span id="cb1-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ...</span></span>
<span id="cb1-18">  </span>
<span id="cb1-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// close the file</span></span>
<span id="cb1-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Close<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">nil</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> err</span>
<span id="cb1-22">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-23">  </span>
<span id="cb1-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// save the results filename to this out interface for checking</span></span>
<span id="cb1-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// e.g. checking that it contains the right data</span></span>
<span id="cb1-26">  outName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-27">  fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Fprintln<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> outName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-28">  </span>
<span id="cb1-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ... return some status</span></span>
<span id="cb1-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-31">  </span></code></pre></div>
<p>The details are not important, which is why I skipped many lines. What‚Äôs important is this: in a test file, I can create a buffer in which to write the filename:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode go code-with-copy"><code class="sourceCode go"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//main_test.go</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> TestRun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>testing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb2-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> mockStdOut bytes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Buffer</span>
<span id="cb2-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>inputFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>mockStdOut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">nil</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb2-6">  t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Fatal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>err<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-7">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-8">  </span>
<span id="cb2-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// mockStdOut contains the resultsfilename, </span></span>
<span id="cb2-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// which we then store in avariable</span></span>
<span id="cb2-11">  resultFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> strings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>TrimSpace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mockStdOut<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>String<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb2-12">  </span>
<span id="cb2-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// and now read that file</span></span>
<span id="cb2-14">  result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> ioutil<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ReadFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>resultFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-15">  </span>
<span id="cb2-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// do some checks with results</span></span>
<span id="cb2-17">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>And, in the actual application, I can just use the system stdout:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode go code-with-copy"><code class="sourceCode go"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// main.go</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// definition of the function run(...) as above</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">func</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Parse flags</span></span>
<span id="cb3-7">  filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> flag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>String<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File to process"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span>
<span id="cb3-8">  flag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Parse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb3-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If user did not provide input file, show usage</span></span>
<span id="cb3-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> flag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Usage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> os<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-11">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> os<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Stdout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">nil</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb3-13">    fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Fprintln<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>os<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Stderr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> err<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-14">    os<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>Exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-15">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> </span>
<span id="cb3-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Did you see what happened? The same function can be passed an internal buffer for testing (no writing files required), or the actual terminal in the final application.</p>
</section>
<section id="parametrizing-io-in-python" class="level2">
<h2 class="anchored" data-anchor-id="parametrizing-io-in-python">Parametrizing IO in Python</h2>
<p>How can I reproduce this technique in Python? Here is some sample module that is similar to the example above:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""main.py - the best simulator ever written."""</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TextIO</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(out: TextIO) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-7">    out.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I just did some awesome simulation!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb4-10">    run(sys.stdout)</span></code></pre></div>
<p>If you run, you get the expected result:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> main.py</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I just did some awesome simulation!</span></span></code></pre></div>
<p>But for testing, we can use a <a href="https://docs.python.org/3/library/io.html#io.StringIO">StringIO</a> object, which acts like the buffer we saw earlier:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""test_main.py - Check that we are indeed awesome"""</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> main</span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_main():</span>
<span id="cb6-7">    mock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.StringIO()</span>
<span id="cb6-8"></span>
<span id="cb6-9">    main.run(mock)</span>
<span id="cb6-10"></span>
<span id="cb6-11">    message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mock.getvalue()</span>
<span id="cb6-12"></span>
<span id="cb6-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I just did some awesome simulation!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>When running this case with <a href="https://docs.pytest.org/en/stable/contents.html">pytest</a> (<code>pytest test_main.py</code>, provided why files are in the same directory), the test passes. We did not have to read from stdout, nor save anything to a file, both of which require more code to be written.</p>
</section>
<section id="studying-go-is-not-a-waste-of-time-even-if-you-do-not-write-go" class="level2">
<h2 class="anchored" data-anchor-id="studying-go-is-not-a-waste-of-time-even-if-you-do-not-write-go">Studying Go is not a waste of time even if you do not write Go</h2>
<p>What does this mean in practice? <strong>It means you stop writing <code>print()</code> statements all over the place, and think about what is being read and written.</strong> This forces me to think of the software at a higher level.</p>
<p>I think there‚Äôs a gap in Python literature: too much focus on new syntax constructions (which are very nice), too focus on Jupyter notebooks, and too little focus in software development: testing, structuring code, making it easier to extend. Both <a href="https://pragprog.com/titles/rggo/powerful-command-line-applications-in-go/">Writing Powerful Command-Line Applications in Go</a> and <a href="https://interpreterbook.com/">Writing Interpreters in Go</a> focus on that: writing useful programs, without nitty-picking syntax details.</p>
<p>Why my obsession with Go in particular? It‚Äôs just that the literature is full of good books, and it‚Äôs a modern language with a clean syntax, powerful and easy to learn in incremental steps. Slowly but surely, I‚Äôm beginning to write more and more Go programs almost as more powerful shell scripts, because it‚Äôs so pleasant to do that. I highly recommend addying this language to your repertoire.</p>


</section>

 ]]></description>
  <category>blog</category>
  <guid>https://fpfortkamp.com/post/go/</guid>
  <pubDate>Thu, 04 Apr 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>How to make Neovim Python LSP aware of your Hatch environments</title>
  <link>https://fpfortkamp.com/post/pyright/</link>
  <description><![CDATA[ 





<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>If you are a nerd like me, you probably have joined the <a href="https://neovim.io/">Neovim</a> cult and have spent more hours configuring it than you care to admit.</p>
<p>Then you might also have spent <a href="https://alpopkes.com/posts/python/packaging_tools/">digging around Python project managers</a> and settled on using <a href="https://hatch.pypa.io/latest/">Hatch</a> for one of your projects. In principle, this means you do not have to manually create environments. <a href="https://hatch.pypa.io/latest/environment/#dependencies">You define dependencies in <code>pyproject.toml</code></a> and, when executing <a href="https://hatch.pypa.io/latest/config/environment/overview/#scripts">Hatch scripts</a>, the <code>hatch</code> program will create environments, install dependencies and execute the commands (like running tests, linting, formatting etc) <em>inside</em> those environments.</p>
<p>But now, when you write Python code on Neovim, using the standard <a href="https://github.com/microsoft/pyright">pyright</a> as the language server (I use the <a href="https://github.com/AstroNvim/astrocommunity/tree/main/lua/astrocommunity/pack/python-ruff">Python-ruff pack</a> from the <a href="https://astronvim.com/">AstroNvim</a> communtity), if you use the same packages you define in the dependencies section (and which are not installed in your global Python environment), pright will complain that it cannot find packages:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/pyright/images/Screenshot-2024-03-18-at-18.06.08-1024x178.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of a neovim session showing error messages</figcaption>
</figure>
</div>
<p>How can it not find packages when you declared everything in the <code>pyproject.toml</code> file, and everything is supposed to be downloaded and installed automatically?</p>
</section>
<section id="the-solution" class="level2">
<h2 class="anchored" data-anchor-id="the-solution">The solution</h2>
<p><strong>You need to tell pyright where to find environments in which the packages are installed</strong>; then, pyright will recognized installed Python packages as something you can import from. In other words: pyright needs to be aware of your Hatch environments.</p>
<p>It might help to first configure hatch itself to use a directory for the virtual environments that are easy to find. <strong>I like to use a <code>.hatch</code> subfolder in my project root folder</strong> (don‚Äôt forget to exclude it from source control). You can change the global hatch configuration to always use that location when using the <code>hatch</code> command with this shell commands:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hatch</span> env prune <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># delete previously created environments</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hatch</span> config set dirs.env.virtual <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".hatch"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modify configuration</span></span></code></pre></div>
<p>Now, when you run a hatch command, it will create environments under <code>.hatch</code>.</p>
<p>Now you have to configure pyright in your <code>pyproject.toml</code> file. Suppose you define a <code>dev</code> environment in which to run various checks like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyproject.toml</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[tool.hatch.envs.dev]</span></span>
<span id="cb2-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3.11"</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">dependencies</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mypy&gt;=1.0.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ruff"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[tool.hatch.envs.dev.scripts]</span></span>
<span id="cb2-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">check</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb2-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest -xvv --ff"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ruff format ."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ruff check ."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>This way, you can also create a environment, install your package and run all tests with:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hatch</span> run dev:check</span></code></pre></div>
<p>Now, include the following configuration:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyproject.toml</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[tool.pyright]</span></span>
<span id="cb4-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">executionEnvironments</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">root</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }]</span></span>
<span id="cb4-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">venvPath</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".hatch"</span></span>
<span id="cb4-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">venv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span></span></code></pre></div>
<p>Restart your neovim, and you will see that the messages above disappear: pyright will get all package information from <code>&lt;your project folder&gt;/.hatch/dev/</code>. As a bonus, you can import pytest in the test files to add fixtures and other goodies.</p>
<p>I hope this is helpful! Let me know if you want to learn more about Hatch or Neovim.</p>


</section>

 ]]></description>
  <category>articles</category>
  <category>configuring-neovim-for-maximum-productivity</category>
  <guid>https://fpfortkamp.com/post/pyright/</guid>
  <pubDate>Tue, 19 Mar 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I‚Äôm studying how to write an interpreter in Go‚Ä¶ when I‚Äôm a Python developer</title>
  <link>https://fpfortkamp.com/post/monkey/</link>
  <description><![CDATA[ 





<p>I think there is no better way to start this blog about being obsessed with programming: an explanation (mostly for myself) on why I‚Äôm studying interpreters (when I do not develop anything related to that) implemented in Go (a language I do not use professionally).</p>
<section id="why-this-subject" class="level2">
<h2 class="anchored" data-anchor-id="why-this-subject">Why this subject?</h2>
<p>The first time I realized that studying interpreters and compilers is somethink I‚Äôd like to do was when re-reading <em><a href="https://a.co/d/bhoo1FD">The Pragmatic Programmer</a></em> last year. I first read this book almost 10 years ago, when I was graduating college and started working more and more with programming, first in my internship and then in my Master‚Äôs studies. I remember it ‚Äúbeing OK‚Äù, without much resonance; however, now that I‚Äôm primarily a software developer, I thought it was time for a review.</p>
<p><em>The Pragmatic Programmer</em> starts with a list of tips that are obvious to me: be professional, care about your work, focus on quality, make learning a habit. The first tip that actually sounded as something new and noteworthy (at least for me, someone who doesn‚Äôt have a degree in Computer Science or anything related) was the <strong>importance of developing your own domain specific languages</strong> <strong>(DSL)</strong>: think about common and repetitive tasks you have to do, encode how you would describe them in a dedicated language, and then create a program that will evaluate this language.</p>
<p>As it turns out, I do have lots of tasks that could use a specific language. In my daily work, I deal with JSON files that follow a specific configuration (describing inputs and outputs to simulations) that very often trigger the same sort of analysis. A DSL for my line of work would look like this:</p>
<pre><code>for results in list_of_results:
    plot temperature vs position
    plot pressure vs position
    calculate maximum pressure

plot maximum pressure of each result vs initial pressure of each result</code></pre>
<p>This actually would be useful! In addition, those very JSON files need to be parsed and validated - they also need to be <em>interpreted</em> in a way.</p>
</section>
<section id="the-book" class="level2">
<h2 class="anchored" data-anchor-id="the-book">The book</h2>
<p>In the beginning of this year, then, I decided to give <em><a href="https://interpreterbook.com/">Writing an Interpreter in Go</a></em> a try, inspired by this video (which made me also learn OCaml just because, but that‚Äôs a story for another time).</p>
<p>https://www.youtube.com/watch?v=NjKJ9-ejR6o</p>
<p>I‚Äôm still on the second chapter, but I‚Äôm loving it. The book is well written, didactic without assuming the reader is stupid. It doesn‚Äôt require the reader know a lot of Go, and it doesn‚Äôt waste time explaning the syntax either - I can always just look it up.</p>
<p>This is a book for software developers, and the author assumes software developer can learn details of programming languages. Most importantly, <strong>it‚Äôs a book about software development</strong>: thinking about data structures, developing incremental tests for their behaviour, not being afraid of creating functions that have just one line of code if they make understanding the program much easier, organizing the code into separate modules. All of these are useful things that I always to improve in my job.</p>
<p><img src="https://fpfortkamp.com/post/monkey/images/Screenshot-2024-03-17-at-10.40.08-1024x576.png" class="img-fluid"></p>
</section>
<section id="what-im-applying-in-my-daily-work-as-a-python-developer" class="level2">
<h2 class="anchored" data-anchor-id="what-im-applying-in-my-daily-work-as-a-python-developer">What I‚Äôm applying in my daily work as a Python developer</h2>
<p>My main project at work is a simulator that was originally written by another very talented engineer, and that I now have to maintain and extend. Very often we and our clients deal with problems when reading and parsing the input files: some fields are missing or they are too complex. Inspired by these studies, I‚Äôm becoming less and less afraid of creating small data structures and functions that process one small part at a time - instead of just trying to conform to what is already in the code.</p>
<p>Yes, I develop Python application, but the language is just a detail. The book could be re-written in Python and the ideas, the theory, the methods would be the same. If I re-implemented my main project in Go (which I actually dream of, to get all the static cross-compilation benefits), my clients couldn‚Äôt care less - they want simulation results. I‚Äôm a firmly believer of being programming languages polyglot and being able to study books that show code in different languages.</p>
<p>I‚Äôll have more to say when I advance in the book and use more and more of its ideas in my Python projects. In the meanwhile, give <em>Writing an Interpreter in Go</em>‚Ä¶ a go.</p>


</section>

 ]]></description>
  <category>articles</category>
  <category>book-recommendations</category>
  <category>learning-interpreters-and-compilers</category>
  <category>what-im-studying</category>
  <guid>https://fpfortkamp.com/post/monkey/</guid>
  <pubDate>Sun, 17 Mar 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Why and how to use different colors in VS Code for different projects</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/color/</link>
  <description><![CDATA[ 





<p>I know what you are going to say: I‚Äôm weird, and apparently it makes no sense to spend time on things like this. But here it is: a post about setting different color schemes for <a href="https://code.visualstudio.com/">VS Code</a>, depending on which folder is open.</p>
<section id="why-setting-different-colors-is-good-for-productivity" class="level2">
<h2 class="anchored" data-anchor-id="why-setting-different-colors-is-good-for-productivity">Why setting different colors is good for productivity</h2>
<p>First, let us say right away: if you spend some any significant time in a program, making it look more pleasant, so that you‚Äôll <em>want</em> to spend more time with it, is super productive. Plus, hacking things is fun, and fun is always a good way to spend time.</p>
<p>But there is also a <em>contextual</em> component. CGP Grey illustrates how it is good to compartimentalize your life, to train your brain to associate certain environments with a desire to focus on certain things:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/snAhsXyO3Ck" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>In this case, when I see a particular color scheme, I will immediately start to think about the project associated with those colors. Also, as I work with different projects alternating them within a given day (sometimes using different programming languages), assigning a different color scheme to each project help me differentiate between them.</p>
</section>
<section id="how-to-set-and-sync-color-schemes-in-vs-code" class="level2">
<h2 class="anchored" data-anchor-id="how-to-set-and-sync-color-schemes-in-vs-code">How to set and sync color schemes in VS Code</h2>
<p>When you configure the editor‚Äôs <a href="https://code.visualstudio.com/docs/getstarted/settings">settings</a>, VS Code saves a JSON file with your customizations in a default location (see the aforelinked docs page). One of the settings is the <a href="https://code.visualstudio.com/docs/getstarted/themes">color scheme</a>. For my default color scheme, I like the <a href="https://ethanschoonover.com/solarized/">Solarized Light</a> theme:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/color/images/Code_PGvr0Covqz.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of VS Code in the Solarized Light color scheme</figcaption>
</figure>
</div>
<p>Now, how can this setting be changed based on the folder you open? It turns out you can open a particular folder in VS Code, which it calls a <em>workspace</em> (workspaces can actually combine different folders). In the Settings UI, you can set it to customize the <em>workspace</em> settings:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/color/images/Code_wCsyAXtpD6.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of the VS Code settings editor</figcaption>
</figure>
</div>
<p>Now, when you save the settings, a <code>settings.json</code> file is created inside the folder you are in; in the figure below, I‚Äôve setup the ‚Äúlocal‚Äù color theme to a dark version of the solarized scheme - but this gets loaded only when I open up that particular folder!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/color/images/Code_qYRrZ4Z2eM.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of VS Code in the Solarized Dark color scheme</figcaption>
</figure>
</div>
</section>
<section id="my-color-schemes" class="level2">
<h2 class="anchored" data-anchor-id="my-color-schemes">My color schemes</h2>
<p>I‚Äôll illustrate with two more projects to get you inspired. When I want to mess around with my <a href="https://github.com/fabiofortkamp/dotfiles/">dotfiles</a>, I use a grey-ish, very utilitarian-looking color scheme (Atom Dark One):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/color/images/Code_ZErK6i88nf.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of VS Code in a gray-like color scheme</figcaption>
</figure>
</div>
<p>But when I work in a project involving the <a href="https://julialang.org/">Julia</a> language, which is particularly associated with blue-purple colors (check their website), I configured VS Code with the ‚ÄúTomorrow Night Blue‚Äù theme:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/color/images/Code_AKPuxJ5Q4K.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of VS Code in a blue-purple color scheme</figcaption>
</figure>
</div>
<p>This is <em>very</em> productive: I can have multiple VS Code windows (working in Julia while tweaking my dotfiles), and when I Alt-TAB the different colors are immediately apparent.</p>
<p>Please do tell me if I‚Äôm wasting my time‚Ä¶</p>


</section>

 ]]></description>
  <category>Articles</category>
  <guid>https://fpfortkamp.com/post/color/</guid>
  <pubDate>Wed, 21 Dec 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>I‚Äôm a Python developer - and this is why I‚Äôm learning Julia</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/julia/</link>
  <description><![CDATA[ 





<p>There‚Äôs no surprise that <a href="http://fpfortkamp.com/tag/python/">I‚Äôm big on Python</a>, but there is something that I can‚Äôt get out of my mind:</p>
<blockquote class="instagram-media blockquote" data-instgrm-captioned="" data-instgrm-permalink="https://www.instagram.com/p/CmW1iXvJIMt/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);">
<div style="padding:16px;">
<a href="https://www.instagram.com/p/CmW1iXvJIMt/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank">
<div style=" display: flex; flex-direction: row; align-items: center;">
<div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;">

</div>
<div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;">
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;">

</div>
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;">

</div>
</div>
</div>
<div style="padding: 19% 0;">

</div>
<div style="display:block; height:50px; margin:0 auto 12px; width:50px;">
<svg width="50px" height="50px" viewbox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xlink="https://www.w3.org/1999/xlink">
<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g>
</svg>
</div>
<div style="padding-top: 8px;">
<div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">
View this post on Instagram
</div>
</div>
<div style="padding: 12.5% 0;">

</div>
<div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;">
<div>
<div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);">

</div>
<div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;">

</div>
<div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);">

</div>
</div>
<div style="margin-left: 8px;">
<div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;">

</div>
<div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)">

</div>
</div>
<div style="margin-left: auto;">
<div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);">

</div>
<div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);">

</div>
<div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);">

</div>
</div>
</div>
<div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;">
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;">

</div>
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;">

</div>
</div>
</a>
<p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;">
<a href="https://www.instagram.com/p/CmW1iXvJIMt/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by FaÃÅbio P. Fortkamp, Dr.&nbsp;Eng. | Mechanical Engineer (<span class="citation" data-cites="fpfortkamp">@fpfortkamp</span>)</a>
</p>
</div>
</blockquote>
<script async="" src="//www.instagram.com/embed.js"></script>
<p>Here‚Äôs a philosophical question: should I focus on getting better and better at Python development, or should I actually devote time to learn other languages such as Julia, R and maybe others? Which path will make me better at my job?</p>
<section id="should-engineers-should-be-programming-languages-polyglots" class="level2">
<h2 class="anchored" data-anchor-id="should-engineers-should-be-programming-languages-polyglots">Should engineers should be (programming languages) polyglots?</h2>
<p>My wife jokes that I talk too much about two heroes of mine: <a href="http://calnewport.com">Cal Newport</a> and <a href="http://austinkleon.com">Austin Kleon</a>. In fact, my own style of working is an intersection of the two, which seem conflicting at first. The Newport approach should tell me to have ‚Äúlaser focus‚Äù on one skill, to be <a href="https://www.calnewport.com/books/so-good/">So Good They Can‚Äôt Ignore Me</a> and become the best Python developer/Mechanical Engineer in the planet. The Kleon approach would be to <a href="https://austinkleon.com/steal/">Steal Like an Artist</a> from all my influences and build <em>my own work</em> from them.</p>
<p>I do think it‚Äôs possible to combine these two modes of working. I am not as focused as Cal Newport and cannot drop projects and ideas serially as he claims to do ‚Äì my brain simply refuses to do it. I like to explore ideas, and techniques, and programming languages too much to do that. However ‚Äî while I‚Äôm exploring, I <em>can</em> indeed focus and dive deep into what I‚Äôm learning, and not just try to be superficial.</p>
<p>So yes, I think developers and engineers should build their programming languages toolbox, and avoid the ‚ÄúI can only do that in Python‚Äù mentality. You can‚Äôt learn every programming language in the world, but having a few in your pocket might help you solve problems (you are an engineer, right?) in a quasi-optimal way.</p>
<p>This way, you focus on getting increasingly better as a <em>developer in general</em>, and not as a <em>Python developer</em>:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/pEfrdAtAmqk" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>My main point is this: the more languages you learn, the more you learn about programming in general.</p>
</section>
<section id="what-julia-can-teach-a-python-developer" class="level2">
<h2 class="anchored" data-anchor-id="what-julia-can-teach-a-python-developer">What Julia can teach a Python developer</h2>
<p>Julia is built to be fast:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/qGW0GT1rCvs" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>In my experience, as someone who is not a computer scientist by training, and who work with people with a similar background but who still code all day, engineers tend to ‚Äúhack‚Äù a Python script to do some sort of simulation or data processing, realize it takes forever to run, and then do nothing about it.</p>
<p>Quite frankly, I‚Äôm learning Julia because my co-workers work in Julia and I don‚Äôt want to be a bottleneck, everytime having to translate everything into Python back and forth. And in my initial explorations, I‚Äôm finding that the Julia language emphasizes vectorization, and making the code as generic as possible. Plus it is a semi-return to compiled languages (I actually learned to program in C, which sounds absurd today).</p>
<p>Julia also has some interesting new packages, being the ‚Äúnew kid in the block‚Äù: I love the workflow emphasized by <a href="https://juliadynamics.github.io/DrWatson.jl/dev/">DrWatson</a> (this alone almost is a reason to try out Julia in the first place) and the ‚Äúevolution of notebooks‚Äù prescribed by <a href="https://github.com/fonsp/Pluto.jl">Pluto</a>.</p>
<p>I know in the Instagram post above I referenced also the R language - we‚Äôll leave that to another post.</p>
</section>
<section id="you-want-to-try-out-julia-too" class="level2">
<h2 class="anchored" data-anchor-id="you-want-to-try-out-julia-too">You want to try out Julia too?</h2>
<p>For a deep 4-hours long session on the ‚Äúscientific computing‚Äù approach to coding in Julia, <a href="https://www.youtube.com/watch?v=x3swaMSCcYk">this video by George Datseris (one of the developers of DrWatson)</a> is excelent.</p>
<p>For the specifics of working with Julia (tools, installing, main libraries), I recommend the free online book <a href="https://juliadatascience.io/">Julia Data Science</a>.</p>
<p>Let‚Äôs discuss in the comments below what do you think Julia and Python (and R etc.)!</p>


</section>

 ]]></description>
  <category>Articles</category>
  <guid>https://fpfortkamp.com/post/julia/</guid>
  <pubDate>Tue, 13 Dec 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Why a mechanical engineer uses Linux - in Windows</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/linux/</link>
  <description><![CDATA[ 





<section id="a-little-bit-of-backstory" class="level2">
<h2 class="anchored" data-anchor-id="a-little-bit-of-backstory">A little bit of backstory</h2>
<p>In the academic year of 2009-2010, I went to the <a href="https://www.up.pt/portal/en/">University of Porto</a> to spend a semester abroad:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/linux/images/IMG_3859.jpg" class="img-fluid figure-img"></p>
<figcaption>Picture of me in a bridge in Porto, Portugal</figcaption>
</figure>
</div>
<p>This was life-changing in several ways. It was the first time I left my family home (since I went to university in my home town), and it was in a different country! I met a lot of people, made several friends, had the privilege of traveling around Europe being only 21, and grew up as a person.</p>
<p>Of course, academically, I also learned a lot. But I had a small problem: I was too far advanced in my Mechanical Engineering curriculum here in Brazil, and I had few options of courses to take in Portugal. This became even harder in the second semester, which led me to the decision of taking Computer Engineering courses to achieve the required number of hours in the classroom.</p>
<p>And then I, a Mechanical Engineer student, took classes on Computer Graphics, Operating Systems, Databases. This experience <em>made me</em> the Mechanical Engineer I am today.</p>
</section>
<section id="what-is-my-job-title-anyway" class="level2">
<h2 class="anchored" data-anchor-id="what-is-my-job-title-anyway">What is my job title anyway?</h2>
<p>When I returned to Brazil, I was ruined. All I could think of was programming, and <em>serious</em> programming, not the sub par classes I had to take in the first years of college. Back in my home university, I took courses in numerical heat transfer, numerical structural analysis, computer-aided manufacturing. I began developing <a href="https://www.learncax.com/knowledge-base/blog/by-category/cfd/writing-a-user-defined-function-udf-in-ansys-fluent">User-Defined Functions in Fluent</a> in the C programming language (good times).</p>
<p>Before graduating, I took an internship position at <a href="https://www.kit.edu/english/index.php">KIT</a>. I worked in a project that involved the refrigeration industry, but‚Ä¶ as a developer, I guess? I spent all days in the VBA (Visual Basic for Applications) editor, implementing models for compressors, valves, heat exchangers, fluid properties ‚Äì and all inside Excel, so that engineers and managers could do their thing without having to open Matlab, or Python, and any code editor.</p>
<p>Quick: was I a Mechanical Engineer, or a Software Developer?</p>
</section>
<section id="where-does-linux-goes-into-this-post" class="level2">
<h2 class="anchored" data-anchor-id="where-does-linux-goes-into-this-post">Where does Linux goes into this post?</h2>
<p>I reminded of all this because, currently, this is what I get to see in front of me almost every day:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/linux/images/WindowsTerminal_9WqvMbOfEl.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of the Windows Terminal app showing a Linux session</figcaption>
</figure>
</div>
<p>I again face the question from above: I spend my days implementing models for heat transfer and fluid flow processes ‚Äì am I an Engineer or a Developer?</p>
<p>My main function in my current job is developing (proprietary) Python software. This is the most complex code I‚Äôve ever worked with, and I have to deal with collaborating with other people with <a href="https://git-scm.com/">Git</a>, keeping track of Python versions (and Python packages versions), debugging, testing. I‚Äôm also writing reports in <a href="https://quarto.org">Quarto</a>, and beginning to study some <a href="https://julialang.org/">Julia</a> (more on this in a later post). These are all related to Mechanical Engineering, and involve serious programming tasks, and this requires serious programming tools.</p>
<p>I‚Äôm not saying that you can‚Äôt do serious development in Windows ‚Äì I‚Äôve done that my whole career. But I <em>was trained</em> to be a programmer in Linux, while taking all those Computer Engineering classes in Portugal. My assignments were to work with a terminal app (like the one you see above), type commands in it and then write code in a text editor. After learning Linux at U. Porto, I couldn‚Äôt go back to the Command Prompt in Windows. In later years, I tried out <a href="http://www.cygwin.com/">Cygwin</a> and <a href="https://gitforwindows.org/">Git Bash</a>, but these were more hacks than anything else and problems always appeared. For instance, you can indeed have a great terminal experience (I even wrote <a href="https://github.com/fabiofortkamp/secondlaw">my own configuration scripts for using terminals in Windows</a>), but basic tools like <code>make</code> aren‚Äôt included. I love working with <a href="https://code.visualstudio.com/">VS Code</a>, and it doesn‚Äôt integrate well with either Cygwin or Git Bash.</p>
<p>So I decided to try out the <a href="https://learn.microsoft.com/en-us/windows/wsl/">Windows Subsystem for Linux</a> (WSL), which allows me to use Windows apps but with the Linux command line and tools. I should have just learned <a href="https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell?view=powershell-7.3&amp;WT.mc_id=-blog-scottha&amp;viewFallbackFrom=powershell-7.1">Powershell</a>, but here we are.</p>
<p>By the way: if you getting more serious into programming tasks in Windows, you should check out <a href="https://www.hanselman.com/blog/taking-your-powershell-prompt-to-the-next-level-with-windows-terminal-and-oh-my-posh-3">Scott Hanselman‚Äôs blog</a>. He writes a lot about Windows apps and tools ‚Äî while also recommending WSL.</p>
</section>
<section id="how-to-configure-it" class="level2">
<h2 class="anchored" data-anchor-id="how-to-configure-it">How to configure it</h2>
<section id="installation" class="level3">
<h3 class="anchored" data-anchor-id="installation">Installation</h3>
<p>So what is WSL? Basically, it‚Äôs a different interface with your Windows PC.</p>
<p>After <a href="https://learn.microsoft.com/en-us/windows/wsl/install">installing it</a>, what you get is a virtual machine that is running a version of Linux. I went with the default options: I‚Äôm running <a href="https://releases.ubuntu.com/22.04/">Ubuntu</a> ‚Äì maybe you can see that I even used the official wallpaper from the current (22.04) Long-Term-Support (LTS) distribution, <em>Jammy Jellyfish</em>. By the way: I‚Äôm running the <a href="https://www.microsoft.com/p/windows-terminal-preview/9n8g5rfz9xk3#activetab=pivot:overviewtab">Windows Terminal Preview</a>, a very modern terminal app. If you install WSL and this app, a <em>profile</em> will be created, and you can select it when opening a new tab:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/linux/images/WindowsTerminal_ovsk3ERpZU.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of Windows Terminal menu of opening new profiles</figcaption>
</figure>
</div>
<p><a href="https://learn.microsoft.com/en-us/windows/terminal/install">I‚Äôve set up Windows Terminal</a> so that the Ubuntu profile is the default one, and also set it to open automatically at startup:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/linux/images/WindowsTerminal_X8MCs4sDVo.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of Windows Terminal settings</figcaption>
</figure>
</div>
<p>And with <a href="https://github.com/fabiofortkamp/secondlaw/blob/master/bin/wterminal.ahk">this script</a> (for <a href="https://www.autohotkey.com">AutoHotkey</a>), which is also in my <a href="https://support.microsoft.com/en-us/windows/add-an-app-to-run-automatically-at-startup-in-windows-10-150da165-dcd9-7230-517b-cf3c295d89dd">Startup folder</a>, I set up the keystroke Ctrl-Shit-Alt-I to toggle opening and hiding the terminal.</p>
</section>
<section id="getting-around-the-command-line" class="level3">
<h3 class="anchored" data-anchor-id="getting-around-the-command-line">Getting around the command line</h3>
<p>With WSL, you don‚Äôt get a full Linux distribution, which its own graphical user interface ‚Äì you only have the command line, so it‚Äôs essential to use it well.</p>
<p>When I was learning Linux, <a href="https://linuxcommand.org/tlcl.php">The Linux Command Line by William Shots</a> was an essential reference - and it‚Äôs free! I highly recommend it as a first step.</p>
<p>I‚Äôve taken one step further from the book above, which uses the bash shell, and set zsh as my default system. <a href="https://github.com/fabiofortkamp/dotfiles">Here‚Äôs my current configuration</a>, which uses <a href="https://ohmyz.sh/">oh-my-zsh</a>. Being able to do these sorts of customizations is the main point of using Linux on Windows.</p>
</section>
<section id="accessing-windows-programs" class="level3">
<h3 class="anchored" data-anchor-id="accessing-windows-programs">Accessing Windows programs</h3>
<p>The beauty of WSL is that it can be thought of as just an interface. For instance, as I said above, I use VS Code, and I downloaded it and installed it as a regular Windows program, and it is in my <code>PATH</code> <a href="https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/">environment variable</a> set <em>in Windows</em>. But in WSL, if I type <code>code</code>, it opens the Windows VS Code app ‚Äì it knows there to look at! In the WSL shell, (<a href="https://learn.microsoft.com/en-us/windows/wsl/filesystems">you navigate the Linux virtual machine directories, as well as the native Windows folder</a>).</p>
</section>
</section>
<section id="but-again-what-does-it-have-to-do-with-engineering" class="level2">
<h2 class="anchored" data-anchor-id="but-again-what-does-it-have-to-do-with-engineering">But again, what does it have to do with Engineering?</h2>
<p>It all comes back to being more efficient at using Windows for software development. Right now I‚Äôm working on a paper that involves running multiple Python scripts and rendering markdown and LaTeX documents. The process of easily generating the final manuscript is completely automated (ask me how), and I can use the full power of ‚Äúthe command line‚Äù to interweave various commands and tasks.</p>
<p>So yes: I‚Äôm a Mechanical Engineer, and Linux, Python, Julia, the terminal etc are tools to do engineering research, and an engineer has to know his tools.</p>
</section>
<section id="what-does-not-work-so-far" class="level2">
<h2 class="anchored" data-anchor-id="what-does-not-work-so-far">What does not work so far</h2>
<p>There are some hiccups. This is a virtual machine, so it has limited memory. Compiling some Julia libraries proved impossible, so for now I‚Äôm not using WSL for that (like I said, more on this later). I would <em>really</em> like to fix that.</p>
<p>It was also not trivial to install different Python versions for my different projects, but <a href="https://computingforgeeks.com/how-to-install-python-on-ubuntu-linux-system/">this guide</a> was very helpful.</p>
<p>Only two drawbacks? Yes, I am very happy with this experience. Surprisingly, my 3-year old son also is, because when he comes to my home office I‚Äôm usually researching Linux things, and he loves seeing <a href="https://en.wikipedia.org/wiki/Tux_(mascot)">Tux</a> in my computer screen.</p>
<p>I began this post with a picture of my 21-year old self, and finished talking about my first-born, while talking about Linux in the middle. I think that‚Äôs all for today.</p>


</section>

 ]]></description>
  <category>Articles</category>
  <guid>https://fpfortkamp.com/post/linux/</guid>
  <pubDate>Fri, 02 Dec 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Compressibility and Expandability: what are they and how to calculate</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/compressibility/</link>
  <description><![CDATA[ 





<p>One of my disappointments back when I was teaching is that I never taught a Thermodynamics class. I heard it is a terrible subject to teach, with high failing rates, but I‚Äôd like to have that experience nevertheless.</p>
<p>Speaking as someone who studied Thermodynamics as an undergrad student and then during graduate school, and who taught classes that depended on Thermodynamics, I think there is a big specific problem with these courses: students have this subject too early in the curriculum, without the maturity to proper understand the difficult concepts. Also, it becomes too easy to forget what you saw in a Thermodynamics class 15 years ago.</p>
<section id="expansion-coefficients" class="level2">
<h2 class="anchored" data-anchor-id="expansion-coefficients">Expansion coefficients</h2>
<p>I‚Äôm telling this story from personal experience: I‚Äôm working on a project where I have to deal with two ‚Äúexpansion coefficients‚Äù that all substances have ‚Äì how they expand (or contract) upon receiving energy ‚Äì , but that do not appear often in most thermodynamic analyses. Hence, I had to go back to the textbooks to understand them.</p>
<p>I‚Äôm taking the definitions below from [1]. The first coefficient is the <em>volumetric isobaric expansivity</em>, which measured how the volume of a substance changes you heat it up at constant pressure:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta%20=%20%5Cfrac%7B1%7D%7Bv%7D%5Cleft(%5Cfrac%7B%5Cpartial%20v%7D%7B%5Cpartial%20T%7D%5Cright)_p%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?v"> is the specific volume, <img src="https://latex.codecogs.com/png.latex?p"> is the pressure and <img src="https://latex.codecogs.com/png.latex?T"> the absolute temperature. This coefficient has units of K<img src="https://latex.codecogs.com/png.latex?%5E%7B-1%7D">, and can be negative; famously, liquid water expands when cooled down below 4 ¬∫C (this is why water bottles can break in the freezer). Most substances, however, expand when heated up (<img src="https://latex.codecogs.com/png.latex?%5Cbeta%20%3E%200">).</p>
<p>The volumetric expansivity may be familiar to Heat Transfer students, and it appears in Free Convection theory; fluids with large values of <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> change density substantially and then move around quickly when temperature gradients are present.</p>
<p>The other coefficient is the <em>isothermal compressibility</em>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha%20=%20-v%20%5Cleft(%5Cfrac%7B%5Cpartial%20v%7D%7B%5Cpartial%20p%7D%5Cright)_T%0A"></p>
<p>This coefficient, with units of Pa<img src="https://latex.codecogs.com/png.latex?%5E%7B-1%7D"> can never be negative: if you exert force in a piston with some fluid at constant temperature, it <em>will</em> contract.</p>
</section>
<section id="calculating-expansivity-and-compressibility-with-coolprop" class="level2">
<h2 class="anchored" data-anchor-id="calculating-expansivity-and-compressibility-with-coolprop">Calculating expansivity and compressibility with CoolProp</h2>
<p>Beware that the coefficients above have many names, depending on the source you are using. To calculate them using the CoolProp library in Python, for instance, I had to look up the <a href="http://www.coolprop.org/coolprop/HighLevelAPI.html#parameter-table">available functions</a>.</p>
<p>Notice that, as derivatives of <img src="https://latex.codecogs.com/png.latex?p-v-T"> relations, <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> are properties of state, depending on two other properties to be calculated. For instance, the expansivity of air at atmospheric pressure and ambient temperature is:</p>
<div id="0d4af5cf" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> CoolProp.CoolProp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PropsSI</span>
<span id="cb1-2">T0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">298</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># K</span></span>
<span id="cb1-3">P0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">101.325e3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pa</span></span>
<span id="cb1-4">fluid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Air'</span></span>
<span id="cb1-5">beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ISOBARIC_EXPANSION_COEFFICIENT"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T0,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P0,fluid)</span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.3e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> K^-1"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(beta,))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3.365e-03 K^-1</code></pre>
</div>
</div>
<p>And the compressibility can be calculated as:</p>
<div id="3e0f15ea" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ISOTHERMAL_COMPRESSIBILITY"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T0,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P0,fluid)</span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.3e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Pa^-1"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(alpha,))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>9.872e-06 Pa^-1</code></pre>
</div>
</div>
</section>
<section id="relationship-to-specific-heat" class="level2">
<h2 class="anchored" data-anchor-id="relationship-to-specific-heat">Relationship to specific heat</h2>
<p>The Mayer relation is [1]:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac_p%20-%20c_v%20=%20%5Cfrac%7BvT%5Cbeta%5E2%7D%7B%5Calpha%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?c_p"> and <img src="https://latex.codecogs.com/png.latex?c_v"> are respectively the constant-pressure and constant-volume speficic heats. The right hand side is always non-negative, which enforces <img src="https://latex.codecogs.com/png.latex?c_p%20%5Cge%20c_v">. The equality sign applies from <em>incompressible substances</em>, for which <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20=%200">.</p>
<p>Let us verify that relation:</p>
<div id="6d05558f" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">c_p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CPMASS"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T0,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P0,fluid)</span>
<span id="cb5-2">c_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CVMASS"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T0,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P0,fluid)</span>
<span id="cb5-3">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T0,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P0,fluid)</span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(c_p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>alpha)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.0</code></pre>
</div>
</div>
<section id="an-aside-about-how-these-properties-are-calculated" class="level3">
<h3 class="anchored" data-anchor-id="an-aside-about-how-these-properties-are-calculated">An aside about how these properties are calculated</h3>
<p>Engineers should beware of black boxes. In the examples above (and below), what exactly is CoolProp doing?</p>
<p>If you are doing a serious project involving thermodynamic and transport properties, you should definitely check out the <a href="http://www.coolprop.org/fluid_properties/PurePseudoPure.html">CoolProp documentation on fluid properties</a></p>
<p>As explained before, <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> can be calculated with only knowledge of the equation of state (EOS). Specific heats cannot be calculated from an EOS; additional information about the <em>energy</em> of the fluid is needed [2], usually from empirical correlations. What the Mayer relation enforces is that <em>only the difference between specific heats</em> can be determined from an EOS; but if you also have a model for <img src="https://latex.codecogs.com/png.latex?c_p">, you can calculate <img src="https://latex.codecogs.com/png.latex?c_v"> and vice-versa. You don‚Äôt need two different models for the two specific heats.</p>
<p>Check out the CoolProp documentation page above to see what other information, besides the EOS, is needed to build up the CoolProp database.</p>
</section>
</section>
<section id="comparison-between-gases" class="level2">
<h2 class="anchored" data-anchor-id="comparison-between-gases">Comparison between gases</h2>
<p>If we pick only gases commonly present in mechanical engineering applications, how do the values of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> vary between them?</p>
<p>When doing this sort of analysis, I always find it useful to use <a href="https://pandas.pydata.org/docs/getting_started/">pandas</a> to build a table and work from there:</p>
<div id="780630fa" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Series, DataFrame</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-3"></span>
<span id="cb7-4">gases <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Air"</span>,</span>
<span id="cb7-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Argon"</span>,</span>
<span id="cb7-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CarbonDioxide"</span>,</span>
<span id="cb7-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ethane"</span>,</span>
<span id="cb7-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helium"</span>,</span>
<span id="cb7-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IsoButane"</span>,</span>
<span id="cb7-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nitrogen"</span>,</span>
<span id="cb7-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Methane"</span>]</span>
<span id="cb7-13">  </span>
<span id="cb7-14">alphav <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty_like(gases,dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float'</span>)</span>
<span id="cb7-15">betav <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty_like(gases,dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float'</span>)</span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,gas <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gases):</span>
<span id="cb7-18">  alphav[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ISOTHERMAL_COMPRESSIBILITY"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T0,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P0,gas)</span>
<span id="cb7-19">  betav[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ISOBARIC_EXPANSION_COEFFICIENT"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T0,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P0,gas)</span>
<span id="cb7-20"></span>
<span id="cb7-21">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataFrame(</span>
<span id="cb7-22">  {</span>
<span id="cb7-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gas"</span>: gases,</span>
<span id="cb7-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha [MPa^-1]"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>alphav,</span>
<span id="cb7-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta [K-1]"</span>: betav</span>
<span id="cb7-26">}</span>
<span id="cb7-27">)</span>
<span id="cb7-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             Gas  alpha [MPa^-1]  beta [K-1]
0            Air        9.872466    0.003365
1          Argon        9.875500    0.003366
2  CarbonDioxide        9.919539    0.003412
3         Ethane        9.945354    0.003435
4         Helium        9.864455    0.003354
5      IsoButane       10.145642    0.003660
6       Nitrogen        9.871181    0.003364
7        Methane        9.886582    0.003377</code></pre>
</div>
</div>
<p>Frankly, this result, with this low variation between gases, surprises me. Mind you that CoolProp is not just using Ideal Gas relations (otherwise the compressibility and expandability of the gases would be equal - prove it!), but is actually using experimental <img src="https://latex.codecogs.com/png.latex?p-v-T"> data. It just so happens that there is not a wide variation between gases.</p>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>I‚Äôve written this post because I needed to learn more about these properties, and I hope it will help more people. Please share it if you find it useful!</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1]: √áengel, Y. A., &amp; Boles, M. A. Termodin√¢mica (7 ed.). Porto Alegre: AMGH, 2013.</p>
<p>[2]: Callen, H. B. Thermodynamics and an Introduction to Thermostatistics (2nd ed.). John Wiley and Sons, 1985.</p>


</section>

 ]]></description>
  <category>Articles</category>
  <guid>https://fpfortkamp.com/post/compressibility/</guid>
  <pubDate>Thu, 10 Nov 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Stages of studying: 1 - Inspectional Reading</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/inspectional/</link>
  <description><![CDATA[ 





<p>Adler and Van Doren‚Äôs <a href="https://www.amazon.com/How-Read-Book-Classic-Intelligent/dp/0671212095/ref=sr_1_1?crid=2XDSWOZNAA8A1&amp;keywords=adler+van+doren&amp;qid=1668002554&amp;sprefix=adler+van+dore%2Caps%2C222&amp;sr=8-1">How to Read a Book</a> is one of the my favorite books. Although the authors talk about ‚Äúnormal‚Äù books (fiction, non-fiction, poetry), I think most of its teachings apply to textbooks and other materials to <em>study</em> in an academic sense.</p>
<p>This is the first in a series of posts detailing how I study hard materials and try to extract the most knowledge from them.</p>
<section id="studying-in-stages" class="level2">
<h2 class="anchored" data-anchor-id="studying-in-stages">Studying in stages</h2>
<p>The basic premise of the book, and something that I apply to almost everything I read, is that reading or studying should be done <em>in stages</em>. I felt quite at home when Adler and van Doren talk about the classic error of trying to read a difficult book, stumping into the first hard concept, and then being stuck for hours in the same chapter - without even understanding what the book is about. Depending on the book level, <em>you will not</em> understand it in the first reading.</p>
<p>Hence, when you have anything to read in front of you, the first step is to do an <em>Inspectional Reading</em> - a high-level form of reading, aiming for general concepts and the overall structure of the book or document, without wasting time on details.</p>
</section>
<section id="what-to-look-when-inspectional-reading" class="level2">
<h2 class="anchored" data-anchor-id="what-to-look-when-inspectional-reading">What to look when inspectional reading</h2>
<p>The authors of <em>How to Read a Book</em> make it clear: inspectional reading is active and demand you take notes. Lately I‚Äôve been a fan of taking notes in paper notebooks:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/inspectional/images/IMG_6209.jpg" class="img-fluid figure-img"></p>
<figcaption>Photo of a notebook with notes titles ‚ÄúInspectional Reading‚Äù</figcaption>
</figure>
</div>
<p>Notice above what I noted: the overall structure of a Heat Transfer book I was studying, the main themes threated, some comments on the notation used, the main equations that grabbed my attention, and then some tasks to delve deeper.</p>
<p>When I was reading the material above, did I encounter some concepts that I did not understand? Of course! But I did not let it stop me of skimming through the whole book. I was actually looking for some details about differential equations, and I have to say I do not understand them yet ‚Äì but I do know that this book has some answers, and I know where to look. I need another deep work session to do an <em>analytical reading</em> - subject of another post.</p>
</section>
<section id="time-constraints" class="level2">
<h2 class="anchored" data-anchor-id="time-constraints">Time constraints</h2>
<p>It is <em>fundamental</em> that an inspectional reading is time bounded - an hour, at most. The purpose of this stage is to get answers quickly and not waste time</p>
<p>Here is another example when I was studying some old class notes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/inspectional/images/IMG_6206.jpg" class="img-fluid figure-img"></p>
<figcaption>Photo of notebook with notes</figcaption>
</figure>
</div>
<p>I was examining these class notes because my father made me take all of my old college notebooks from his home, and while studying the Heat Transfer book I remember of a Linear Systems class that I took in college.</p>
<blockquote class="instagram-media blockquote" data-instgrm-captioned="" data-instgrm-permalink="https://www.instagram.com/reel/CkvaKdNJeML/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);">
<div style="padding:16px;">
<a href="https://www.instagram.com/reel/CkvaKdNJeML/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank">
<div style=" display: flex; flex-direction: row; align-items: center;">
<div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;">

</div>
<div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;">
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;">

</div>
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;">

</div>
</div>
</div>
<div style="padding: 19% 0;">

</div>
<div style="display:block; height:50px; margin:0 auto 12px; width:50px;">
<svg width="50px" height="50px" viewbox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xlink="https://www.w3.org/1999/xlink">
<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g>
</svg>
</div>
<div style="padding-top: 8px;">
<div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">
View this post on Instagram
</div>
</div>
<div style="padding: 12.5% 0;">

</div>
<div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;">
<div>
<div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);">

</div>
<div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;">

</div>
<div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);">

</div>
</div>
<div style="margin-left: 8px;">
<div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;">

</div>
<div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)">

</div>
</div>
<div style="margin-left: auto;">
<div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);">

</div>
<div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);">

</div>
<div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);">

</div>
</div>
</div>
<div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;">
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;">

</div>
<div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;">

</div>
</div>
</a>
<p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;">
<a href="https://www.instagram.com/reel/CkvaKdNJeML/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by FaÃÅbio P. Fortkamp, Dr.&nbsp;Eng. | Mechanical Engineer (<span class="citation" data-cites="fpfortkamp">@fpfortkamp</span>)</a>
</p>
</div>
</blockquote>
<script async="" src="//www.instagram.com/embed.js"></script>
<p>I thought studying these notes might be useful for my projects - but as I completed my Inspectional Reading, I realized this material was not right (for now). I did not have to read two chapters in detail, which would take much more time, to reach that conclusion.</p>
</section>
<section id="the-other-stages" class="level2">
<h2 class="anchored" data-anchor-id="the-other-stages">The other stages</h2>
<p>Studying is deeply important to me as a researcher, and I treat it seriously. I can only advance in my carrer if I have impactful ideas.</p>
<p>Stay tuned for more posts of my study techniques and tips‚Ä¶</p>


</section>

 ]]></description>
  <category>Articles</category>
  <guid>https://fpfortkamp.com/post/inspectional/</guid>
  <pubDate>Wed, 09 Nov 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>3 things missing from the Mechanical Engineering curriculum</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/missing/</link>
  <description><![CDATA[ 





<p>In 2020, I ended my post-doc position and started teaching Mechanical Engineering classes (in a different university). I loved the teaching experience, and I learned a lot. One month ago, however, in search of new challenges, I quit that job and got accepted at a research-only position, dealing directly with industry problems. And in only one month, I realized how much has to be changed in Mechanical Engineering curricula, to make it more modern and more aligned with practical, real problems. These are my suggestions:</p>
<ol type="1">
<li><strong>Proper software development</strong>: Mechanical Engineering is not Computer Science. Maybe we don‚Äôt need to learn about Turing Machines, Cryptography, or Web Sockets. But my present job is the second time in my career that my primary role is <em>implementing models in software to be used by other people</em>, and I didn‚Äôt learn any software development in school. Students should learn more about testing, version control, different programming languages, debugging.</li>
<li><strong>More advanced Thermodynamics</strong>: in retrospect, I think I severely underestimated my student‚Äôs ability to understand deep theories. The Refrigeration and Oil industries are primary examples where <em>blends</em> or <em>mixtures of fluids</em> are used, and in my experience students have no contact with more advanced Equations of State; there is an enormous gap between ‚Äúusing the ideal gas law‚Äù and ‚Äújust getting the properties from a table‚Äù. But guess what: these tables are not magical, they were generated with Equations of State, and the people using them do not understand these equations.</li>
<li><strong>Studying techniques</strong>: I started teaching shortly after the pandemic; I then taught classes online, and went back to in-person classes. And what I saw is that the younger generation completely forgot how to study with full focus. I‚Äôm not talking about spending the entire weekend studying for an exam, but rather the <a href="https://www.calnewport.com/">Cal Newport style</a> of <em>deep work</em>, in short but intense bursts.</li>
</ol>
<p>To be clear: I‚Äôm not ‚Äúfighting the system‚Äù. These are things that <em>I</em> would change if I went back to the classroom, in <em>my own classes</em>. Teaching Mechanical Engineering made me love the profession more than ever, and I want it to evolve - always.</p>
<p>Any thoughts. <a href="https://twitter.com/fpfortkamp">Comment on Twitter</a> or leave a note below!</p>



 ]]></description>
  <category>Lists</category>
  <guid>https://fpfortkamp.com/post/missing/</guid>
  <pubDate>Tue, 08 Nov 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Including superheat in the compressor regression</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/superheat/</link>
  <description><![CDATA[ 





<p>We are always learning. After studying more about compressor datasheets, I realized that I forgot to include the superheat in <a href="https://fpfortkamp.com/post/compressor/">yesterday‚Äôs</a> post. Let‚Äôs fix that.</p>
<p>The main problem is that, in every calculation, I took the inlet state as saturated vapor in the given evaporating temperature, when in reality the <a href="https://products.embraco.com/commtrol/api/pdf/compressor/datasheet/7187?&amp;condensing_temperature=54.4&amp;evaporating_temperature=-23.3&amp;units=w&amp;units_temp=metric-system&amp;filters%5Bbare%5D=513701421&amp;filters%5Brefrigerant%5D%5B%5D=R-600a&amp;filters%5Bstandard%5D=ASHRAE&amp;filters%5Bfrequency%5D=60">datasheet</a> specifies that the vapor always enters at 32.2 ¬∫C.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/_media/datasheet.png" class="img-fluid figure-img"></p>
<figcaption>Datasheet</figcaption>
</figure>
</div>
<p>So let‚Äôs start again. We will read the dataset with <a href="https://pandas.pydata.org/?msclkid=29caa245bff611ec80ba73d4aced3042">pandas</a>:</p>
<div id="00b6393f" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compressor.csv"</span>,delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Evaporating Temperature [C]  Condensing temperature [C]  \
0                          -35                          35   
1                          -30                          35   
2                          -25                          35   
3                          -20                          35   
4                          -15                          35   
5                          -10                          35   

   Cooling Capacity [W]  Power [W]  Current [A]  Gas Flow Rate [kg/h]  \
0                   167        129         1.21                  1.79   
1                   218        144         1.23                  2.34   
2                   282        160         1.27                  3.03   
3                   362        177         1.32                  3.89   
4                   457        197         1.38                  4.93   
5                   570        217         1.45                  6.16   

    Efficiency [W/W]  
0               1.29  
1               1.52  
2               1.77  
3               2.04  
4               2.33  
5               2.63  </code></pre>
</div>
</div>
<p>The sections below are mostly a repetition, but we‚Äôll update the equations where necessary:</p>
<section id="how-to-calculate-the-mass-flow-rate-of-a-compressor" class="level2">
<h2 class="anchored" data-anchor-id="how-to-calculate-the-mass-flow-rate-of-a-compressor">How to calculate the mass flow rate of a compressor?</h2>
<p>A reciprocating compressor like this one is a <em>volumetric</em> machine: it displaces a certain volume of fluid, based on its internal geometry, and the mass flow rate depends on the suction state.</p>
<p>The most basic, <strong>ideal</strong> model is then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%7Bm%7D%20=%20%5Cfrac%7B%5Cdot%7B%5Cmathcal%7BV%7D%7D%20_%7B%5Cmathrm%7BD%7D%7D%7D%7Bv%20_%7B%5Cmathrm%7Bin%7D%7D%7D%0A"></p>
<p>where the numerator is the displacement rate; for a compressor with <img src="https://latex.codecogs.com/png.latex?z"> cylinders at a fixed rotation speed <img src="https://latex.codecogs.com/png.latex?n"> it can be calculated</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%7B%5Cmathcal%7BV%7D%7D%20_%7B%5Cmathrm%7BD%7D%7D%20=%20%7B%5Cmathcal%7BV%7D%7D%20_%7B%5Cmathrm%7BD%7D%7D%20n%20z%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BV%7D%20_%7B%5Cmathrm%7BD%7D%7D"> is the internal displacement.</p>
<p>Let‚Äôs plot the actual mass flow rate from the datasheet (using the geometric parameters from it) and the above model to compare:</p>
<div id="302c7b25" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> CoolProp.CoolProp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PropsSI</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-4"></span>
<span id="cb3-5">plt.rc(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font'</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">Vd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.54e-6</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in m3</span></span>
<span id="cb3-8">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Hz</span></span>
<span id="cb3-9">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-10">fluid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'R600a'</span></span>
<span id="cb3-11">Treturn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">32.2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">273</span></span>
<span id="cb3-12"></span>
<span id="cb3-13">Vd_dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># m3/s</span></span>
<span id="cb3-14">T_evap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Evaporating Temperature [C]"</span>].values</span>
<span id="cb3-15">m_dot_actual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gas Flow Rate [kg/h]"</span>].values</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we take the inverse of the density </span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># of the vapor at the evaporing *pressure*</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and the return gas temperature</span></span>
<span id="cb3-20">v_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,Treturn,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,Te<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">273</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,fluid),fluid)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> Te <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> T_evap])</span>
<span id="cb3-21">m_dot_ideal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Vd_dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v_in</span>
<span id="cb3-22"></span>
<span id="cb3-23">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb3-24">ax.plot(T_evap,m_dot_ideal,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k-'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ideal"</span>)</span>
<span id="cb3-25">ax.plot(T_evap,m_dot_actual,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ko'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual"</span>)</span>
<span id="cb3-26">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Evaporating temperature [¬∫C]"</span>)</span>
<span id="cb3-27">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gas flow rate [kg/h]"</span>)</span>
<span id="cb3-28">ax.legend()</span>
<span id="cb3-29">ax.grid()</span>
<span id="cb3-30">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/superheat/index_files/figure-html/cell-3-output-1.png" width="580" height="434" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Clearly our model is not good enough! There is a <em>volumetric efficiency</em> that is influenced by dead volumes and leakages:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ceta_%7B%5Cmathrm%7Bv%7D%7D%20=%20%5Cfrac%7B%5Cdot%7Bm%7D%7D%7B%5Cfrac%7B%5Cdot%7B%5Cmathcal%7BV%7D%7D%20_%7B%5Cmathrm%7BD%7D%7D%7D%7Bv%20_%7B%5Cmathrm%7Bin%7D%7D%7D%7D%0A"></p>
<div id="854e54fc" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">eta_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m_dot_actual<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>m_dot_ideal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb4-2">fig2, ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb4-3"></span>
<span id="cb4-4">ax2.plot(T_evap,m_dot_actual,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ko-'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual mass flow rate"</span>)</span>
<span id="cb4-5">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Evaporating temperature [¬∫C]"</span>)</span>
<span id="cb4-6">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gas flow rate [kg/h] (dots)"</span>)</span>
<span id="cb4-7"></span>
<span id="cb4-8">ax3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax2.twinx()</span>
<span id="cb4-9">ax3.plot(T_evap,eta_v,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kx--'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Volumetric efficiency"</span>)</span>
<span id="cb4-10">ax3.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Volumetric efficiency [%] (x)"</span>)</span>
<span id="cb4-11">ax2.grid()</span>
<span id="cb4-12"></span>
<span id="cb4-13">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/superheat/index_files/figure-html/cell-4-output-1.png" width="631" height="434" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="what-influences-the-volumetric-efficiency" class="level3">
<h3 class="anchored" data-anchor-id="what-influences-the-volumetric-efficiency">What influences the volumetric efficiency?</h3>
<p>The volumetric efficiency depends primarily on the pressure ratio between condensing and evaporating levels:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ar%20_%7B%5Cmathrm%7Bp%7D%7D%20=%20%5Cfrac%7BP%20_%7B%5Cmathrm%7Bcond%7D%7D%7D%7BP%20_%7B%5Cmathrm%7Bevap%7D%7D%7D%0A"></p>
<p>So let‚Äôs plot that:</p>
<div id="6d026359" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">eta_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m_dot_actual<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>m_dot_ideal</span>
<span id="cb5-2"></span>
<span id="cb5-3">Pcond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Condensing temperature [C]"</span>].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">273</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,fluid)</span>
<span id="cb5-4">Pevap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,Te<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">273</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,fluid) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> Te <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> T_evap])</span>
<span id="cb5-5">rp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pcond<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Pevap</span>
<span id="cb5-6">fig20, ax20 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb5-7"></span>
<span id="cb5-8"></span>
<span id="cb5-9"></span>
<span id="cb5-10">ax20.plot(rp,eta_v,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ko-'</span>)</span>
<span id="cb5-11">ax20.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pressure ratio"</span>)</span>
<span id="cb5-12">ax20.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Volumetric efficiency"</span>)</span>
<span id="cb5-13"></span>
<span id="cb5-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/superheat/index_files/figure-html/cell-5-output-1.png" width="606" height="434" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Maybe we can use a log-log plot?</p>
<div id="f91973d6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">eta_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m_dot_actual<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>m_dot_ideal</span>
<span id="cb6-2"></span>
<span id="cb6-3">Pcond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Condensing temperature [C]"</span>].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">273</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,fluid)</span>
<span id="cb6-4">Pevap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,Te<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">273</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,fluid) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> Te <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> T_evap])</span>
<span id="cb6-5">rp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pcond<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Pevap</span>
<span id="cb6-6">fig20, ax20 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb6-7"></span>
<span id="cb6-8"></span>
<span id="cb6-9"></span>
<span id="cb6-10">ax20.plot(rp,eta_v,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ko-'</span>)</span>
<span id="cb6-11">ax20.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pressure ratio"</span>)</span>
<span id="cb6-12">ax20.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Volumetric efficiency"</span>)</span>
<span id="cb6-13">ax20.set_yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span>
<span id="cb6-14">ax20.set_xscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span>
<span id="cb6-15"></span>
<span id="cb6-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/superheat/index_files/figure-html/cell-6-output-1.png" width="650" height="435" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>which seems to make the relationship linear. A candidate for a model would be then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cln%20%5Ceta_%7B%5Cmathrm%7Bv%7D%7D%20=%20b_0%20+%20b_1%20%5Cln%20r_%7B%5Cmathrm%7Bp%7D%7D%0A"></p>
<p>As with yesterday‚Äôs post, We will use <a href="https://scikit-learn.org/stable/index.html">scikit-learn</a> to <em>train</em> a model to calculate the coefficients, based on 50% of the data selected at random:</p>
<div id="5dd68f09" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> r2_score</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span>
<span id="cb7-4"></span>
<span id="cb7-5">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(rp).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-6">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(eta_v)</span>
<span id="cb7-7"></span>
<span id="cb7-8">X_train,X_test,Y_train,Y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X,Y,test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb7-9"></span>
<span id="cb7-10">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression(fit_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-11">model.fit(X_train, Y_train)</span>
<span id="cb7-12"></span>
<span id="cb7-13">fig4, ax4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb7-14">ax4.plot(np.log(rp),np.log(eta_v),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ko'</span>)</span>
<span id="cb7-15">ax4.plot(X,model.predict(X),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k-'</span>)</span>
<span id="cb7-16">ax4.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log of Pressure ratio"</span>)</span>
<span id="cb7-17">ax4.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log of Volumetric efficiency"</span>)</span>
<span id="cb7-18">ax4.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy (R^2) =  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.5f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb7-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> r2_score(Y_test, model.predict(X_test)))</span>
<span id="cb7-20">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/superheat/index_files/figure-html/cell-7-output-1.png" width="619" height="456" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The advantage of using the pressure ratio as the main feature is that the effect of the superheat degree is probably low, but we need more data with the same pressure ratio and different degrees of superheat to be sure.</p>
</section>
</section>
<section id="polynomials-for-cooling-capacity" class="level2">
<h2 class="anchored" data-anchor-id="polynomials-for-cooling-capacity">Polynomials for cooling capacity</h2>
<p>The other useful thing to do with a compressor datasheet of calculating a polynomial of the form [1]:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%7BQ%7D%20_%7B%5Cmathrm%7BL%7D%7D%20=%20a%20_0%20+%20a%20_1%20%20t%20_%7B%5Cmathrm%7Bevap%7D%7D%20+%20a%20_2%20%20t%20_%7B%5Cmathrm%7Bevap%7D%7D%5E2%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cdot%7BQ%7D_%7B%5Cmathrm%7BL%7D%7D"> is the cooling capacity and <img src="https://latex.codecogs.com/png.latex?t_%7B%5Cmathrm%7Bevap%7D%7D"> is the evaporating temperature in degress Celsius. Four points of note:</p>
<ol type="1">
<li>This polynomial allows you to interpolate in different points other than the tabulated ones, an also can be combined with other models in the refrigeration system;</li>
<li>The coefficients themselves are function of the condensing temperature, the fluid properties and the compressor geometry;</li>
<li>The same thing can be done for the power consumption, with different coefficients;</li>
<li>The resulting polynomial is valid for the same compressor in different evaporating pressures, but keeping the superheat and subcooling degress the same as the values from the datasheet.</li>
</ol>
<div id="232228de" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PolynomialFeatures</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb8-3"></span>
<span id="cb8-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.values[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first column (evaporating temperature) as a 2D array, as required</span></span>
<span id="cb8-5">YQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cooling Capacity [W]"</span>].values</span>
<span id="cb8-6"></span>
<span id="cb8-7">X_train,X_test,QL_train,QL_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X,YQL,test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9">QL_quadratic_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(</span>
<span id="cb8-10">[</span>
<span id="cb8-11">(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'poly'</span>, PolynomialFeatures(degree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb8-12">(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>, LinearRegression(fit_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))])</span>
<span id="cb8-13">QL_quadratic_model.fit(X_train, QL_train)</span>
<span id="cb8-14">QL_quadratic_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QL_quadratic_model.predict(X_test)</span>
<span id="cb8-15"></span>
<span id="cb8-16">fig4, ax4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb8-17">ax4.scatter(QL_test,QL_quadratic_pred)</span>
<span id="cb8-18">ax4.grid()</span>
<span id="cb8-19">ax4.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simulated cooling capacity [W]]'</span>)</span>
<span id="cb8-20">ax4.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted cooling capacity [W]'</span>)</span>
<span id="cb8-21">ax4.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy (R^2) =  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.5f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb8-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> r2_score(QL_test, QL_quadratic_pred))</span>
<span id="cb8-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/superheat/index_files/figure-html/cell-8-output-1.png" width="601" height="456" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The resulting coefficients are (from <img src="https://latex.codecogs.com/png.latex?a_0"> to <img src="https://latex.codecogs.com/png.latex?a_2">):</p>
<div id="7b43c2ae" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(QL_quadratic_model.named_steps[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear"</span>].coef_)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[8.32e+02 2.95e+01 3.00e-01]</code></pre>
</div>
</div>
<p>Hence, this polynomial seems to work fine, even though we have very few data points; with more data points in a test apparatus, this same model could be retrained, making the coefficients more and more accurate.</p>
<p>The advantage of this approach is that, if we are working with this compressor and selecting heat exchangers sizes, for instance, we do not need to evaluate thermophysical properties at each iteration but only a polynomial, which is a huge time saver. How to make this integration between models is the subject of another post.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1]: Stoecker, W. F. Design of thermal systems. [sl]: McGraw-Hill, 1980.</p>


</section>

 ]]></description>
  <category>Articles</category>
  <guid>https://fpfortkamp.com/post/superheat/</guid>
  <pubDate>Wed, 20 Apr 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring and regressing data from a compressor datasheet with Python</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/compressor/</link>
  <description><![CDATA[ 





<p>When selecting a compressor for a refrigeration system, the engineer usually has to browse through datasheets to select the most appropriate machine. The user must select a compressor that works with the selected <em>refrigerant</em> (chosen for environmental and cost reasons) and is able to deliver the required <em>cooling capacity</em> when operating between <em>evaporating and condensing temperatures</em>; these are linked to the <em>cold and hot source temperatures</em> (that is, the low temperature that is to maintained and the hot ambient temperature over which we have no control) through heat exchangers, but for this text we will ignore that and assume ideal heat exchangers.</p>
<p><a href="https://products.embraco.com/commtrol/api/pdf/compressor/datasheet/7187?&amp;condensing_temperature=54.4&amp;evaporating_temperature=-23.3&amp;units=w&amp;units_temp=metric-system&amp;filters%5Bbare%5D=513701421&amp;filters%5Brefrigerant%5D%5B%5D=R-600a&amp;filters%5Bstandard%5D=ASHRAE&amp;filters%5Bfrequency%5D=60">Here is one example of a compressor datasheet</a> that we will explore in this post. The main data is presented in tables of various metrics as a function of evaporating temperature, and we have one table for each condensing temperature like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/_media/datasheet.png" class="img-fluid figure-img"></p>
<figcaption>Compressor datasheet</figcaption>
</figure>
</div>
<p>This must be converted to a text format. After a <a href="https://leancrew.com/all-this/2021/07/trains-and-tables/?msclkid=2560a0cdbff511ec83dccfa21dafa949?">recomendation from Dr.&nbsp;Drang</a>, I often use <a href="https://tabula.technology/">Tabula</a>: this app allows you to upload PDFs and extract a text table from it:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/_media/tabula.png" class="img-fluid figure-img"></p>
<figcaption>Tabula</figcaption>
</figure>
</div>
<p>The result can be downloaded as a CSV and cleaned up; it is also useful to explicitly include the condensing temperature as a column, in the case we want to generalize the results of this post to other temperatures:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://fpfortkamp.com/_media/csv.png" class="img-fluid figure-img"></p>
<figcaption>CSV screesnshot</figcaption>
</figure>
</div>
<p>This can be parsed with <a href="https://pandas.pydata.org/?msclkid=29caa245bff611ec80ba73d4aced3042">pandas</a>:</p>
<div id="3ce9632b" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compressor.csv"</span>,delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Evaporating Temperature [C]  Condensing temperature [C]  \
0                          -35                          35   
1                          -30                          35   
2                          -25                          35   
3                          -20                          35   
4                          -15                          35   
5                          -10                          35   

   Cooling Capacity [W]  Power [W]  Current [A]  Gas Flow Rate [kg/h]  \
0                   167        129         1.21                  1.79   
1                   218        144         1.23                  2.34   
2                   282        160         1.27                  3.03   
3                   362        177         1.32                  3.89   
4                   457        197         1.38                  4.93   
5                   570        217         1.45                  6.16   

    Efficiency [W/W]  
0               1.29  
1               1.52  
2               1.77  
3               2.04  
4               2.33  
5               2.63  </code></pre>
</div>
</div>
<section id="how-to-calculate-the-mass-flow-rate-of-a-compressor" class="level2">
<h2 class="anchored" data-anchor-id="how-to-calculate-the-mass-flow-rate-of-a-compressor">How to calculate the mass flow rate of a compressor?</h2>
<p>A reciprocating compressor like this one is a <em>volumetric</em> machine: it displaces a certain volume of fluid, based on its internal geometry, and the mass flow rate depends on the suction state.</p>
<p>The most basic, <strong>ideal</strong> model is then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%7Bm%7D%20=%20%5Cfrac%7B%5Cdot%7B%5Cmathcal%7BV%7D%7D%20_%7B%5Cmathrm%7BD%7D%7D%7D%7Bv%20_%7B%5Cmathrm%7Bin%7D%7D%7D%0A"></p>
<p>where the numerator is the displacement rate; for a compressor with <img src="https://latex.codecogs.com/png.latex?z"> cylinders at a fixed rotation speed <img src="https://latex.codecogs.com/png.latex?n"> it can be calculated</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%7B%5Cmathcal%7BV%7D%7D%20_%7B%5Cmathrm%7BD%7D%7D%20=%20%7B%5Cmathcal%7BV%7D%7D%20_%7B%5Cmathrm%7BD%7D%7D%20n%20z%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BV%7D%20_%7B%5Cmathrm%7BD%7D%7D"> is the internal displacement.</p>
<p>Let‚Äôs plot the actual mass flow rate from the datasheet (using the geometric parameters from it) and the above model to compare:</p>
<div id="e38b2c86" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> CoolProp.CoolProp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PropsSI</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-4"></span>
<span id="cb3-5">plt.rc(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font'</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">Vd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.54e-6</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in m3</span></span>
<span id="cb3-8">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Hz</span></span>
<span id="cb3-9">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-10">fluid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'R600a'</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">Vd_dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># m3/s</span></span>
<span id="cb3-13">T_evap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Evaporating Temperature [C]"</span>].values</span>
<span id="cb3-14">m_dot_actual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gas Flow Rate [kg/h]"</span>].values</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we take the inverse of the density </span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># of saturated vapor (quality = 1)</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># at each value of evaporating temperature</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># not forgetting to convert to K for CoolProp</span></span>
<span id="cb3-20">v_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,Te <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">273</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,fluid)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> Te <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> T_evap])</span>
<span id="cb3-21">m_dot_ideal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Vd_dot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v_in</span>
<span id="cb3-22"></span>
<span id="cb3-23">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb3-24">ax.plot(T_evap,m_dot_ideal,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k-'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ideal"</span>)</span>
<span id="cb3-25">ax.plot(T_evap,m_dot_actual,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ko'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual"</span>)</span>
<span id="cb3-26">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Evaporating temperature [¬∫C]"</span>)</span>
<span id="cb3-27">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gas flow rate [kg/h]"</span>)</span>
<span id="cb3-28">ax.set_title(</span>
<span id="cb3-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""R-600a compressor, 60 Hz, 1 cylinder, displacement = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> cm3, </span></span>
<span id="cb3-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">condensing temperature = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ¬∫C"""</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(Vd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Condensing temperature [C]"</span>].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]),</span>
<span id="cb3-31">loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb3-32">ax.legend()</span>
<span id="cb3-33">ax.grid()</span>
<span id="cb3-34">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/compressor/index_files/figure-html/cell-3-output-1.png" width="817" height="490" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Clearly our model is not good enough! There is a <em>volumetric efficiency</em> that is influenced by dead volumes and leakages:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ceta_%7B%5Cmathrm%7Bv%7D%7D%20=%20%5Cfrac%7B%5Cdot%7Bm%7D%7D%7B%5Cfrac%7B%5Cdot%7B%5Cmathcal%7BV%7D%7D%20_%7B%5Cmathrm%7BD%7D%7D%7D%7Bv%20_%7B%5Cmathrm%7Bin%7D%7D%7D%7D%0A">:</p>
<div id="56a05ba7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">eta_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m_dot_actual<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>m_dot_ideal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb4-2">fig2, ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb4-3"></span>
<span id="cb4-4">ax2.plot(T_evap,m_dot_actual,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ko'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual mass flow rate"</span>)</span>
<span id="cb4-5">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Evaporating temperature [¬∫C]"</span>)</span>
<span id="cb4-6">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gas flow rate [kg/h] (dots)"</span>)</span>
<span id="cb4-7">ax2.set_title(</span>
<span id="cb4-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""R-600a compressor, 60 Hz, 1 cylinder, displacement = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> cm3, </span></span>
<span id="cb4-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">condensing temperature = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ¬∫C"""</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(Vd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Condensing temperature [C]"</span>].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]),</span>
<span id="cb4-10">loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12">ax3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax2.twinx()</span>
<span id="cb4-13">ax3.plot(T_evap,eta_v,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kx'</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Volumetric efficiency"</span>)</span>
<span id="cb4-14">ax3.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Volumetric efficiency [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">] (x)"</span>)</span>
<span id="cb4-15">ax2.grid()</span>
<span id="cb4-16"></span>
<span id="cb4-17">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/compressor/index_files/figure-html/cell-4-output-1.png" width="817" height="490" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="polynomials-for-cooling-capacity" class="level2">
<h2 class="anchored" data-anchor-id="polynomials-for-cooling-capacity">Polynomials for cooling capacity</h2>
<p>The other useful thing to do with a compressor datasheet of calculating a polynomial of the form [1]:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdot%7BQ%7D%20_%7B%5Cmathrm%7BL%7D%7D%20=%20a%20_0%20+%20a%20_1%20%20t%20_%7B%5Cmathrm%7Bevap%7D%7D%20+%20a%20_2%20%20t%20_%7B%5Cmathrm%7Bevap%7D%7D%5E2%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cdot%7BQ%7D_%7B%5Cmathrm%7BL%7D%7D"> is the cooling capacity and <img src="https://latex.codecogs.com/png.latex?t_%7B%5Cmathrm%7Bevap%7D%7D"> is the evaporating temperature in degress Celsius. Three points of note:</p>
<ol type="1">
<li>This polynomial allows you to interpolate in different points other than the tabulated ones, an also can be combined with other models in the refrigeration system;</li>
<li>The coefficients themselves are function of the condensing temperature, the fluid properties and the compressor geometry;</li>
<li>The same thing can be done for the power consumption, with different coefficients.</li>
</ol>
<p>We will use <a href="https://scikit-learn.org/stable/index.html">scikit-learn</a> to <em>train</em> a model to calculate the coefficients, based on 50% of the data selected at random:</p>
<div id="263b34b8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mean_squared_error, r2_score</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PolynomialFeatures</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb5-6"></span>
<span id="cb5-7">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.values[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first column (evaporating temperature) as a 2D array, as required</span></span>
<span id="cb5-8">YQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cooling Capacity [W]"</span>].values</span>
<span id="cb5-9"></span>
<span id="cb5-10">X_train,X_test,QL_train,QL_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X,YQL,test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb5-11"></span>
<span id="cb5-12">QL_quadratic_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(</span>
<span id="cb5-13">[</span>
<span id="cb5-14">(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'poly'</span>, PolynomialFeatures(degree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb5-15">(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>, LinearRegression(fit_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))])</span>
<span id="cb5-16">QL_quadratic_model.fit(X_train, QL_train)</span>
<span id="cb5-17">QL_quadratic_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QL_quadratic_model.predict(X_test)</span>
<span id="cb5-18"></span>
<span id="cb5-19">fig4, ax4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb5-20">ax4.scatter(QL_test,QL_quadratic_pred)</span>
<span id="cb5-21">ax4.grid()</span>
<span id="cb5-22">ax4.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simulated cooling capacity [W]]'</span>)</span>
<span id="cb5-23">ax4.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted cooling capacity [W]'</span>)</span>
<span id="cb5-24">ax4.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy (R^2) =  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.5f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb5-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> r2_score(QL_test, QL_quadratic_pred))</span>
<span id="cb5-26">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/compressor/index_files/figure-html/cell-5-output-1.png" width="609" height="465" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The resulting coefficients are (from <img src="https://latex.codecogs.com/png.latex?a_0"> to <img src="https://latex.codecogs.com/png.latex?a_2">):</p>
<div id="9a2d8be5" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(QL_quadratic_model.named_steps[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear"</span>].coef_)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[8.32e+02 2.95e+01 3.00e-01]</code></pre>
</div>
</div>
<p>Hence, this polynomial seems to work fine, even though we have very few data points; with more data points in a test apparatus, this same model could be retrained, making the coefficients more and more accurate.</p>
<p>The advantage of this approach is that, if we are working with this compressor and selecting heat exchangers sizes, for instance, we do not need to evaluate thermophysical properties at each iteration but only a polynomial, which is a huge time saver. How to make this integration between models is the subject of another post.</p>
<p><strong>UPDATE</strong>: there‚Äôs a <a href="https://fpfortkamp.com/post/superheat/">follow-up post</a> which corrects some mistakes that you should read now.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1]: Stoecker, W. F. Design of thermal systems. [sl]: McGraw-Hill, 1980.</p>


</section>

 ]]></description>
  <category>Articles</category>
  <guid>https://fpfortkamp.com/post/compressor/</guid>
  <pubDate>Tue, 19 Apr 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>First Law Analysis of a Mixture of Non-Ideal Gases - Exercise 13-99 from √áengel‚Äôs Thermodynamics book (7th ed)</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/real/</link>
  <description><![CDATA[ 





<p>In a <a href="https://fpfortkamp.com/post/first/">previous post</a>, we performed a First-Law Analysis, calculating work and heat transfer, of a mixture of ideal gases.</p>
<p>Now we have a more realistic situation, taken from Exercise 13-99 from [1]: a mixture of 4 kg of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BHe%7D"> and 8 kg of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BO_2%7D"> is kept in a rigid tank initially at 170 K and 7 MPa and pressure. The tank is then heated up to 220 K. What is the final pressure and the heat transfer during this process, assuming that helium is an ideal gas but oxygen is not?</p>
<p>We have two things in consideration here: first, as the oxygen is not itself is an ideal gas, its molecules will interact with each other in a way that the ideal gas model (which assumes molecules completely ignorant of the presence of other molecules, with no attraction or repulsion forces mainly) cannot predict; but second, how will the molecules of <em>different gases</em> interact. In other words: will the molecules of oxygen suffer forces from helium molecules as well?</p>
<p>I‚Äôll take the middle way here and use <em>ideal gas mixture rules</em> for <em>non-ideal gases</em>. The mixture is approximately a mixture of ideal gases, with little interaction between different components, but the individual behavior of the components will follow different rules.</p>
<p>Independent of the equation of state, we can start by calculating the composition of the mixture in different bases. From the given mass values, the mass fraction of helium is <img src="https://latex.codecogs.com/png.latex?x_%7B%5Cmathrm%7BHe%7D%7D%20=%20%5Cfrac%7B1%7D%7B3%7D"> and of oxygen is <img src="https://latex.codecogs.com/png.latex?x_%7B%5Cmathrm%7BO_2%7D%7D%20=%20%5Cfrac%7B2%7D%7B3%7D">. The total mass is <img src="https://latex.codecogs.com/png.latex?m%20=%2012%5C,%5Cmathrm%7Bkg%7D">. Each of the <img src="https://latex.codecogs.com/png.latex?n"> components has its molar mass <img src="https://latex.codecogs.com/png.latex?M_i">, and the mixture molar mass can be calculated as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AM_%7B%5Cmathrm%7Bm%7D%7D%20=%20%5Cfrac%7B1%7D%7B%5Csum_%7Bi=1%7D%5En%20%5Cfrac%7Bx_i%7D%7BM_i%7D%7D%0A"></p>
<p>The mixture gas constant is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AR_%7B%5Cmathrm%7Bm%7D%7D%20=%20%5Cfrac%7BR_%7B%5Cmathrm%7Bu%7D%7D%7D%7BM_%7B%5Cmathrm%7Bm%7D%7D%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?R_%7B%5Cmathrm%7Bu%7D%7D"> is the universal gas constant. Then the molar fraction of each component is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20=%20x_i%20%5Cfrac%7BM_%7B%5Cmathrm%7Bm%7D%7D%7D%7BM_i%7D%0A"></p>
<p>With this composition, how do we sum up individual properties? Since what we have is temperature and pressure, we can use <em>Amagat‚Äôs rule</em> and add the volumes - but, since we are dealing with non-ideal gases, we should use a non-dimensional volume in the form of the compressibility factor:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AZ%20=%20%5Cfrac%7BP%20%5Cmathcal%7BV%7D%7D%7Bm%20R%20T%7D%0A"></p>
<p>The mixture rule is then</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AZ_%7B%5Cmathrm%7Bm%7D%7D%20=%20%5Csum_%7Bi=1%7D%5En%20y_i%20Z_i%0A"></p>
<p>where, since it‚Äôs an ideal gas, <img src="https://latex.codecogs.com/png.latex?Z_%7B%5Cmathrm%7BHe%7D%7D%20=%201">, and <img src="https://latex.codecogs.com/png.latex?Z_%7B%5Cmathrm%7BO_2%7D%7D"> can be calculated from its equation of state. Here, we can use the <em>mixture</em> values of pressure and temperature, instead of partial values, as a way of already accounting for interaction forces and making the model more realistic [1].</p>
<p>At the initial state (1), then, this will give the initial mixture volume - which is preserved during the heating process. Now, if we calculate the new (at final state 2) compressibility factor of oxygen with the mixture <em>volume</em> instead of the pressure, there will probably a larger error, but we‚Äô‚Äôll use that anyway</p>
<p>I‚Äôll use Python and the <a href="http://www.coolprop.org">CoolProp</a> library for calculating the fluid properties</p>
<div id="40dffd65" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> CoolProp.CoolProp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PropsSI</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.constants <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> R <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> Ru</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convention: index 0 is helium, index 1 is oxygen</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">components <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'He'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O2'</span>]</span>
<span id="cb1-8">molar_masses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MOLARMASS'</span>,c) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> components])</span>
<span id="cb1-9"></span>
<span id="cb1-10">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb1-11">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">Mm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>molar_masses)</span>
<span id="cb1-14"></span>
<span id="cb1-15">Rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ru<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Mm</span>
<span id="cb1-16"></span>
<span id="cb1-17">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>molar_masses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Mm</span>
<span id="cb1-18"></span>
<span id="cb1-19">T1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span></span>
<span id="cb1-20">P1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7e6</span></span>
<span id="cb1-21"></span>
<span id="cb1-22">Z1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T1,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P1,components[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])])</span>
<span id="cb1-23">Zm1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(y,Z1)</span>
<span id="cb1-24"></span>
<span id="cb1-25">Vm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Zm1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>P1</span>
<span id="cb1-26"></span>
<span id="cb1-27">T2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span></span>
<span id="cb1-28"></span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notice that CoolProp work with density, not specific volumes</span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and we always use the mixture properties for the individual components</span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and only then apply mixture rule</span></span>
<span id="cb1-33">density <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Vm</span>
<span id="cb1-34"></span>
<span id="cb1-35">Z2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T2,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>,density,components[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])])</span>
<span id="cb1-36">Zm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(y,Z2)</span>
<span id="cb1-37"></span>
<span id="cb1-38">P2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Zm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Vm</span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New pressure = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> MPa"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(P2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span>,))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>New pressure = 9.90 MPa</code></pre>
</div>
</div>
<p>Now, to calculate heat transfer, we need to apply the First Law of Thermodynamics. Since we have a closed system with no volume variation and overall no indication of shaft work, the First Law reads:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AQ%20=%20U_2%20-%20U_1%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?U"> is the total internal energy. Assuming there is no chemical reactions, the internal energy can be broken down into two separate systems, for each component. For helium (an ideal gas), we assume constant specific heats and use the fact that the internal energy of ideal gases depend only on temperatures. For the non-ideal oxygen gas, we use the <em>residual enthalpy</em> <img src="https://latex.codecogs.com/png.latex?%5CDelta%20h%5E*">, which is how much the enthalpy of the gas deviated from an ideal gas model. Keep in mind that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Au%20=%20h%20-%20Pv%20=%20h%20-%20ZRT%0A"></p>
<p>Hence, to calculate the internal energy variation for oxygen, we need to account for three terms:</p>
<ol type="1">
<li>the ideal gas enthalpy variation</li>
<li>the residual enthalpy variation for states 2 and 1</li>
<li>the difference between enthalpy and internal energy.</li>
</ol>
<p>Calculating everything:</p>
<div id="960c4aca" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">Tmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (T1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notice that CoolProp does not have an ideal gas constant-volume specific heat</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and that we have to provide a second argument, even if it only requires temperature</span></span>
<span id="cb3-5">R_He <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ru <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> molar_masses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-6">cvHe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cp0mass"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,Tmean,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P2,components[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> R_He</span>
<span id="cb3-7"></span>
<span id="cb3-8">du_He <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cvHe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(T2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T1)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now, to use the residual properties, we have to use molar properties</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">cpmolarO2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cp0molar"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,Tmean,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P2,components[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-13">dh_ig_O2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cpmolarO2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(T2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>T1)</span>
<span id="cb3-14"></span>
<span id="cb3-15">dresidual_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HMOLAR_RESIDUAL"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T1,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P1,components[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-16">dresidual_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PropsSI(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HMOLAR_RESIDUAL"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>,T2,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,P2,components[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-17">dhu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ru<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(Z2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Z1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T1)</span>
<span id="cb3-18"></span>
<span id="cb3-19">du_O2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(molar_masses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (dh_ig_O2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dresidual_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dresidual_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dhu)</span>
<span id="cb3-20"></span>
<span id="cb3-21">Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>du_He <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>du_O2)</span>
<span id="cb3-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Heat transfer = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> kJ"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(Q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Heat transfer = 972.99 kJ</code></pre>
</div>
</div>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1]: √áengel, Y. A., &amp; Boles, M. A. Termodin√¢mica (7 ed.). Porto Alegre: AMGH, 2013.</p>


</section>

 ]]></description>
  <category>Exercise from √áengel&#39;s Thermodynamics</category>
  <guid>https://fpfortkamp.com/post/real/</guid>
  <pubDate>Fri, 18 Mar 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Calculting equilibrium composition of a mixture of gases - Exercise 16-89 from √áengel‚Äôs Thermodynamics book (7th ed)</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/equilibrium/</link>
  <description><![CDATA[ 





<p>This is exercise 16-89 from [1]: a mixture of 1 mol of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BH_2O%7D">, 2 mols of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BO_2%7D"> and 5 mols of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BN_2%7D"> is heated up to 2200 K and 5 atm of pressure. The final composition will have the formation of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BH_2%7D"> as well; what is the equilibrium composition, and is it reasonable to assume there will be no <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BOH%7D"> in the final composition?</p>
<p>I teach several classes on heat engines, steam generators and internal combustion engines, and for me the prime application of chemical thermodynamics and equilibrium composition is emissions. For a given combustion reaction, will pollutants such as <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BNO%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BCO%7D"> be formed? How much of them? The exercise explained above is a nice example of such calculations.</p>
<p>All calculations below assume all components are ideal gases.</p>
<p>First, we need to write the reaction:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BH_2O%7D%20+%202%5Cmathrm%7BO_2%7D%20+%205%5Cmathrm%7BN_2%7D%20%5Cto%20x%5Cmathrm%7BH_2O%7D%20+%20y%5Cmathrm%7BO_2%7D%20+%20z%5Cmathrm%7BN_2%7D%20+%20w%5Cmathrm%7BH_2%7D%0A"></p>
<p>where the unknowns <img src="https://latex.codecogs.com/png.latex?%7Bx,y,v,w%7D"> form a <em>vector</em> to be found with an appropriate system of equations. Since we have three elements (<img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BN,O,H%7D">), or equivalently <img src="https://latex.codecogs.com/png.latex?(%5Cmathrm%7BN_2,O_2,H_2%7D)">), we can write three mass balances:</p>
<p>For hydrogen gas:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax%20+%20w%20-1%20=%200%0A"></p>
<p>For oxygen gas:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A2.5-0.5x-y=0%0A"></p>
<p>For nitrogen gas:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A5-z%20=%200%0A"></p>
<p>(Do you have any doubts on why these equations are as such?)</p>
<p>One missing equation has to be determined from equilibrium considerations. Looking at tables of equilibrium constants, I posit that the free hydrogen gas is formed by dissociation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BH_2O%7D%20%5Crightleftharpoons%20%5Cmathrm%7BH_2%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%0A%5Cmathrm%7BO_2%7D%0A"> whose equilibrium constant at 2200 K is <img src="https://latex.codecogs.com/png.latex?%5Cln%20K_p%20=%20-6.768">.</p>
<p>The definition of equilibrium coefficient for this latter equation is [1]:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AK_p%20=%20%5Cfrac%7BN_%7B%5Cmathrm%7BH_2%7D%7D%5E%7B%5Cnu_%7B%5Cmathrm%7BH_2%7D%7D%7D%20N_%7B%5Cmathrm%7BO_2%7D%7D%5E%7B%5Cnu_%7B%5Cmathrm%7BO_2%7D%7D%7D%7D%7BN_%7B%5Cmathrm%7BH_2O%7D%7D%5E%7B%5Cnu_%7B%5Cmathrm%7BH_2O%7D%7D%7D%7D%5Cleft(%5Cfrac%7BP%7D%7BN_%7B%5Cmathrm%7Btotal%7D%7D%7D%20%5Cright)%5E%7B%5Cnu_%7B%5Cmathrm%7BH_2%7D%7D%20+%20%5Cnu_%7B%5Cmathrm%7BO_2%7D%7D%20-%20%5Cnu_%7B%5Cmathrm%7BH_2O%7D%7D%7D%0A"> where the <img src="https://latex.codecogs.com/png.latex?%5Cnu_i"> are the stoichiometric coefficients in the dissociation equation, the <img src="https://latex.codecogs.com/png.latex?N_i"> are the real molar contents in the actual system where the dissociation occur, and <img src="https://latex.codecogs.com/png.latex?P"> is the pressure in atm:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AK_p%20=%20%5Cfrac%7Bw%5E%7B1%7D%20y%5E%7B0.5%7D%7D%7Bx%5E%7B1%7D%7D%5Cleft(%5Cfrac%7B5%7D%7Bx%20+%20y%20+%20z%20+%20w%7D%20%5Cright)%5E%7B0.5%7D%0A"></p>
<p>Take a minute and see if you can understand this equation. It took me almost an hour to properly understand it.</p>
<p>The vector of unknowns then is the solution of a 4-dimensional function, and this problem can be solved numerically with R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rootSolve)</span>
<span id="cb1-2">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], </span>
<span id="cb1-3">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F2 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5-0.5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb1-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F3 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb1-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">F4 =</span> ((a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(a)))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.768</span>))</span>
<span id="cb1-6"></span>
<span id="cb1-7">ss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiroot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">positive=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(ss)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$root
[1] 0.998972571 2.000513714 5.000000000 0.001027429

$f.root
           F1            F2            F3            F4 
 1.685501e-15 -1.332268e-15  0.000000e+00  1.414749e-13 

$iter
[1] 4

$estim.precis
[1] 3.612318e-14</code></pre>
</div>
</div>
<p>Keep in mind that I had to tweak this code until it worked. For instance, if you write the fourth equation in terms of logarithms, and not with exponentials as I did, you might have some numerical problems (try!). Also, the solution is sensitive to initial conditions; the final solution makes sense, as oxygen and nitrogen are practically preserved and some of the water vapor in fact dissociates.</p>
<p>As for the underlying assumption: will there be <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BOH%7D"> in the final composition? The equilibrium constant for <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BH_2O%7D%20%5Crightleftharpoons%20%5Cmathrm%7BOH%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cmathrm%7BH_2%7D"> at 2200 K is <img src="https://latex.codecogs.com/png.latex?%5Cln%20K_p%20=%20-7.148">. The dissociation constants from water vapor to <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BH_2%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BOH%7D"> are very similar, and hence the reactions will occur in parallel, giving some amount of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BOH%7D"> in the products, contrary to our assumptions. If you actually perform an experiment similar to this problem and encounter some errors in the final composition, this is a likely source of deviations.</p>
<p>The smaller the value of <img src="https://latex.codecogs.com/png.latex?K_p">, the harder is for the reaction to occur; you can see from the above equations that this coefficient is a measure of how much products form from the reactants. Hence, for similar <img src="https://latex.codecogs.com/png.latex?K_p">, the amount of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BH_2%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BOH%7D"> formed will also be similar.</p>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1]: √áengel, Y. A., &amp; Boles, M. A. Termodin√¢mica (7 ed.). Porto Alegre: AMGH, 2013.</p>


</section>

 ]]></description>
  <category>Exercise from √áengel&#39;s Thermodynamics</category>
  <guid>https://fpfortkamp.com/post/equilibrium/</guid>
  <pubDate>Thu, 17 Mar 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>First Law Analysis of a Mixture of Ideal Gases - Exercise 13-97 from √áengel‚Äôs Thermodynamics book (7th ed)</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/first/</link>
  <description><![CDATA[ 





<p>This is exercise 13-97 from [1]: a mixture of gases composed of 55% of nitrogen gas and 45% of carbon dioxide (in mass) is originally at 200 kPa and 45 ÀöC. The system is heated up and expands, but due to the action of a spring, the pressure variation as a function of volume <img src="https://latex.codecogs.com/png.latex?P(%5Cmathcal%7BV%7D)"> follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP%20=%20A%20+%20K%20%5Cmathcal%7BV%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?A%20=%20111.111%5C,%5Cmathrm%7BkPa%7D"> and <img src="https://latex.codecogs.com/png.latex?K%20=%20888.89%5C,%5Cmathrm%7BkPa/m%5E3%7D">. During the heating, volume doubles; what is the work and heat transfers associated with the process?</p>
<p>For that, in contrast with the <a href="https://fpfortkamp.com/post/mixture/">previous</a> <a href="https://fpfortkamp.com/post/isothermic/">posts</a>, now we‚Äôll use Python and the <a href="http://pyromat.org"><code>pyromat</code></a> package, which I‚Äôve just discovered today.</p>
<p>With the added heat, the system will expand and perform work, which can be calculated using only mechanics:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AW%20=%20%5Cint_%7B%5Cmathcal%7BV%7D_1%7D%5E%7B%5Cmathcal%7BV%7D_2%7D%20P%20%5Cmathrm%7Bd%7D%5Cmathcal%7BV%7D%0A"></p>
<p>Where the initial volume can be obtained from the given pressure variation, and the final volume is double that:</p>
<div id="adf7199e" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">111.111</span></span>
<span id="cb1-2">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">888.89</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">P1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb1-5">V1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (P1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>A)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>K</span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"V1 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> m3"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(V1))</span>
<span id="cb1-7">V2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>V1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>V1 = 0.10 m3</code></pre>
</div>
</div>
<p>The integration above gives:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AW%20=%20A%20*%20(%5Cmathcal%7BV%7D_2%20-%20%5Cmathcal%7BV%7D_1)%20+%20%5Cfrac%7BK%7D%7B2%7D%5Cleft(%5Cmathcal%7BV%7D_2%5E2%20-%20%5Cmathcal%7BV%7D_1%5E2%5Cright)%0A"></p>
<p>and calculating it:</p>
<div id="39ca185d" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(V2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>V1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(V2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> V1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"W = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> kJ"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(W,))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>W = 24.44 kJ</code></pre>
</div>
</div>
<p>To compute the heat <em>added</em> to the system, a First Law analysis reads:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AQ%20=%20W%20+%20%5CDelta%20U%20=%20W%20+%20m%20c_v%20(T_2-T_1)%0A"></p>
<p>where, assuming a mixture of ideal gases (an hypothesis not used so far!), all mass-specific properties are additive. The gas constant is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AR%20=%20%5Csum_%7Bi=1%7D%5Ek%20x_i%20R_i%0A"> where <img src="https://latex.codecogs.com/png.latex?k%20=%202"> components, <img src="https://latex.codecogs.com/png.latex?x_i"> is the individual mass fraction and <img src="https://latex.codecogs.com/png.latex?R_i"> the individual gas constant. The gas constant is needed to compute the temperature variation; at state 1, the mass (which is constant in all states for a closed system) is computed from the ideal gas equation of state:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am%20=%20%5Cfrac%7BP_1%20V_1%7D%7BR%20T_1%7D%0A"></p>
<p>and now, applying the same equation for state 2:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AT_2%20=%20%5Cfrac%7BP_2%20V_2%7D%7Bm%20R%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?P_2"> can be obtained from the pressure-volume equation.</p>
<p>The constant-volume specific heat for ideal gases is a function of temperature only, and for better accuracy can be calculated at the average temperature. The mixture specific heat is computed similarly to the gas constant above.</p>
<p>The <code>pyromat</code> library has function to create ideal gas ‚Äúobjects‚Äù and then access constants and functions as illustrated below:</p>
<div id="b3733603" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyromat <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span>
<span id="cb5-2">N2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ig.N2"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ig = ideal gas model</span></span>
<span id="cb5-3">CO2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ig.CO2"</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5">xN2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.55</span></span>
<span id="cb5-6">xCO2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>xN2</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each object has a .R() method to calculate the gas constant</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the default units are kJ, kPa, m3, K, kmol</span></span>
<span id="cb5-10">R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xN2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>N2.R() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xCO2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>CO2.R()</span>
<span id="cb5-11"></span>
<span id="cb5-12">T1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">273</span></span>
<span id="cb5-13">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (P1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>V1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T1)</span>
<span id="cb5-14"></span>
<span id="cb5-15">P2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>V2</span>
<span id="cb5-16">T2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (P2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>V2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>R)</span>
<span id="cb5-17"></span>
<span id="cb5-18">Tmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (T1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-19"></span>
<span id="cb5-20">cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xN2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>N2.cv(T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Tmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xCO2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>CO2.cv(T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Tmean)</span>
<span id="cb5-21"></span>
<span id="cb5-22">Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(T2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>T1)</span>
<span id="cb5-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> kJ"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(Q,))</span></code></pre></div>
</div>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1]: √áengel, Y. A., &amp; Boles, M. A. Termodin√¢mica (7 ed.). Porto Alegre: AMGH, 2013.</p>


</section>

 ]]></description>
  <category>Exercise from √áengel&#39;s Thermodynamics</category>
  <guid>https://fpfortkamp.com/post/first/</guid>
  <pubDate>Tue, 15 Mar 2022 23:16:34 GMT</pubDate>
</item>
<item>
  <title>Computing the work of a mixture of gases - Exercises 13-94 and 13-95 from √áengel‚Äôs Thermodynamics book</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/isothermic/</link>
  <description><![CDATA[ 





<p>In the <a href="https://fpfortkamp.com/post/mixture/">previous post</a>, we saw how to calculate the speed of sound of a mixture of ideal gases, the main assumption is that we can add the individual specific heats of the components, weighted by the mass fractions.</p>
<p>For mixtures of ideal gases, this is true for all mass-specific properties, including the gas constant <img src="https://latex.codecogs.com/png.latex?R">. Hence, basic First-Law analyses can be performed quite easily.</p>
<section id="an-example-of-isothermic-work" class="level2">
<h2 class="anchored" data-anchor-id="an-example-of-isothermic-work">An example of isothermic work</h2>
<p>The specific work required to compress an ideal gas in a closed system [1] isothermally at <img src="https://latex.codecogs.com/png.latex?T"> from pressure <img src="https://latex.codecogs.com/png.latex?P_1"> to <img src="https://latex.codecogs.com/png.latex?P_2"> is [1]:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw_%7B%5Cmathrm%7Bcomp%7D%7D%20=%20R%20T%20%5Cln%20%5Cfrac%7BP_2%7D%7BP_1%7D%0A"></p>
<p>This is also valid for a mixture of ideal gases, provided the mixture gas constant is used:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AR%20=%20%5Cfrac%7BR_u%7D%7BM_%7B%5Cmathrm%7Bm%7D%7D%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?R_u%20=%208.31447%5C,%5Cmathrm%7BkJ/kg%20K%7D"> is the <em>universal</em> gas constant and the mixture molar mass is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AM_%7B%5Cmathrm%7Bm%7D%7D%20=%20%5Csum_%7Bi=1%7D%5Ek%20y_i%20M_i%0A"></p>
<p>summing over <img src="https://latex.codecogs.com/png.latex?k"> components, and there <img src="https://latex.codecogs.com/png.latex?y_i"> and <img src="https://latex.codecogs.com/png.latex?M_i"> are the individual molar fractions and molar mass of component <img src="https://latex.codecogs.com/png.latex?i">, respectively.</p>
<p>Consider exercise 13-94 from [1]: the mixture contains 85% of nitrogen gas, and the remainder is carbon dioxide. The temperature is held at 300 K and the pressure is risen from 100 kPa to 500 kPa. What is the compression work?</p>
<p>The following implementation is in R. We first define a function to compute the desired value based on the initial content of nitrogen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">work.N2.CO2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(yN2) {</span>
<span id="cb1-2">  MN2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.013</span></span>
<span id="cb1-3">  MCO2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.01</span></span>
<span id="cb1-4">  Ru <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.13447</span></span>
<span id="cb1-5">  T <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb1-6">  P1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-7">  P2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb1-8">  </span>
<span id="cb1-9">  Mm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> yN2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>MN2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>yN2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>MCO2</span>
<span id="cb1-10">  R <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Ru<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Mm</span>
<span id="cb1-11">  </span>
<span id="cb1-12">  wcomp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(P2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>P1)</span>
<span id="cb1-13">  wcomp</span>
<span id="cb1-14">}</span></code></pre></div>
</div>
<p>Let‚Äôs check with the individual given value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">work.N2.CO2</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.85</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 129.1433</code></pre>
</div>
</div>
<p>Notice that this value is in kJ/kg.</p>
<p>Now, let‚Äôs see how this varies with nitrogen content:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curve</span>(work.N2.CO2,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/isothermic/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The more nitrogen we have, the larger the work. Why is that? Nitrogen is lighter (compare the molar masses), so with more nitrogen the mixture molar mass decreases, but that increases the gas constant and hence the specific work. The overall volume variations increase with a lighter gas, increasing the required work to increase the pressure.</p>
</section>
<section id="an-example-of-isentropic-work" class="level2">
<h2 class="anchored" data-anchor-id="an-example-of-isentropic-work">An example of isentropic work</h2>
<p>Now we examine Exercise 13-95 from [1], where are given directly the mixture molar mass of 32 kg/kmol and a specific heat ratio of 1.35; as we‚Äôve discussed, these are obtained from weighted sums. The initial state is 100 kPa and 293 K, the final pressure 1000 kPa, and the process occurs at constant entropy. What is the work?</p>
<p>The compression work of an ideal gas in an isentropic process is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw_%7B%5Cmathrm%7Bcomp%7D%7D%20=%20%5Cfrac%7BR%20T_1%7D%7Bk-1%7D%20%5Cleft%5B%5Cleft(%5Cfrac%7BP_2%7D%7BP_1%7D%5Cright)%5E%7B%7B%5Cfrac%7Bk-1%7D%7Bk%7D%7D%7D-1%5Cright%5D%0A"> Can we use this expression of a single ideal gas for a mixture of ideal gases? Again yes, provide we use the mixture properties, which are already given. Notice that the mixture gas constant is not given but can be calculated similarly as above. Hence:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.35</span></span>
<span id="cb5-2">Mm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb5-3">Ru <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.13447</span></span>
<span id="cb5-4">R <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Ru<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Mm </span>
<span id="cb5-5"></span>
<span id="cb5-6">P1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb5-7">P2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb5-8">T1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">293</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># some intermediate parameters to facilitate writing</span></span>
<span id="cb5-11">Pi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> P2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>P1</span>
<span id="cb5-12">gamma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> ((k<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>k)</span>
<span id="cb5-13">Y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Pi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>gamma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-14"></span>
<span id="cb5-15">wcomp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(k<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y</span>
<span id="cb5-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(wcomp) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in kJ/kg</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 173.7753</code></pre>
</div>
</div>
<p>To compare, we can also compute the work by temperature variations. An isentropic process follows <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7BT_2%7D%7BT_1%7D%20=%20%5Cleft(%5Cfrac%7BP_2%7D%7BP_1%7D%5Cright)%5E%7B%5Cfrac%7Bk-1%7D%7Bk%7D%7D%0A"></p>
<p>and, in an adiabatic closed-system process:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw_%7B%5Cmathrm%7Bcomp%7D%7D%20=%20c_v(T_2-T_1)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?c_v%20=%20%5Cfrac%7BR%7D%7Bk-1%7D">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.35</span></span>
<span id="cb7-2">Mm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb7-3">Ru <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.13447</span></span>
<span id="cb7-4">R <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Ru<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Mm </span>
<span id="cb7-5"></span>
<span id="cb7-6">P1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb7-7">P2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb7-8">T1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">293</span></span>
<span id="cb7-9"></span>
<span id="cb7-10">T2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> T1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(P2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>P1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>((k<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>k)</span>
<span id="cb7-11">cv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(k<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)</span>
<span id="cb7-12">wcomp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(T2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>T1)</span>
<span id="cb7-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(wcomp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 173.7753</code></pre>
</div>
</div>
<p>And the values match.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1]: √áengel, Y. A., &amp; Boles, M. A. Termodin√¢mica (7 ed.). Porto Alegre: AMGH, 2013. In Portuguese.</p>


</section>

 ]]></description>
  <category>Exercise from √áengel&#39;s Thermodynamics</category>
  <guid>https://fpfortkamp.com/post/isothermic/</guid>
  <pubDate>Tue, 15 Mar 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Speed of sound of a mixture of gases - Exercise 13-92 from √áengel‚Äôs Thermodynamics book (7th ed)</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/mixture/</link>
  <description><![CDATA[ 





<p>Why do we need a separate <em>mixture</em> thermodynamics subject? Because, when two fluids are mixed, the individual properties do not necessarily add up to the total system, due to <em>interaction</em> effects.</p>
<p>As usual in Thermodynamics, we need a reference model, and the ideal model for mixtures is an <em>ideal gas mixture</em>, where certain properties are simply the weighted sum of the properties of the components.</p>
<section id="calculating-the-speed-of-sound-of-a-mixture-of-ideal-gases" class="level2">
<h2 class="anchored" data-anchor-id="calculating-the-speed-of-sound-of-a-mixture-of-ideal-gases">Calculating the speed of sound of a mixture of ideal gases</h2>
<p>As an example, let‚Äôs us solve Exercise 13-92 from [1]: a mixture of carbon dioxide and nitrogen flows through a convergent nozzle, and it exits at 500 K and a speed of 360 m/s, which is stated as the speed of sound of the mixture in that condition. What is the mass fraction of carbon dioxide in this mixture?</p>
<p>First, some context. Carbon dioxide and nitrogen are common <em>combustion products</em>: gases that are formed when hydrocarbons burn with air. Other compounds are formed, such as water vapor, sulfur oxides and excess oxygen, but depending on the fuel composition and air context, carbon dioxide and nitrogen dominate the gases, and we approximate the combustion gas as a mixture of just these two gases. Convergent nozzles are commonly employed in airplane jet turbines to accelerate the fluid (the combustion gases) and generate thrust.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?x_%7B%5Cmathrm%7BCO_2%7D%7D"> be the mass fraction of carbon dioxide in the mixture, and hence <img src="https://latex.codecogs.com/png.latex?x_%7B%5Cmathrm%7BN_2%7D%7D%20=%201%20-%20x_%7B%5Cmathrm%7BCO_2%7D%7D">.</p>
<p>We‚Äôll assume both components are ideal gases in the problem‚Äôs conditions, and a mixture of ideal gases is itself an ideal gas. The speed of sound for these fluids is [1]:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac%5E2%20=%20k%20R%20T%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?k"> is the ratio of isobaric to isovolumetric specific heats, and <img src="https://latex.codecogs.com/png.latex?R"> is the difference between then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AkR%20=%20%5Cfrac%7Bc_p%7D%7Bc_v%7D%5Cleft(c_p%20-%20c_v%5Cright)%0A"></p>
<p>Now, the specific heats is a property that is additive:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac_p%20=%20x_%7B%5Cmathrm%7BCO_2%7D%7Dc_%7Bp,%5Cmathrm%7BCO_2%7D%7D%20(T)%20+%20%5Cleft(1-x_%7B%5Cmathrm%7BCO_2%7D%7D%5Cright)c_%7Bp,%5Cmathrm%7BN_2%7D%7D%20(T)%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac_v%20=%20x_%7B%5Cmathrm%7BCO_2%7D%7Dc_%7Bv,%5Cmathrm%7BCO_2%7D%7D%20(T)%20+%20%5Cleft(1-x_%7B%5Cmathrm%7BCO_2%7D%7D%5Cright)c_%7Bv,%5Cmathrm%7BN_2%7D%7D%20(T)%0A"> where, since the temperature is fixed, the individual values of specific heats can be read from a table.</p>
<p>If the given speed is the speed of sound, then <img src="https://latex.codecogs.com/png.latex?V%5E2%20=%20c%5E2%20%20=%20kRT">, and with some rearranging the following function will achieve a zero:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x_%7B%5Cmathrm%7BCO_2%7D%7D)%20=%20%5Cfrac%7BV%5E2%7D%7Bc_p%20T%7D%20-%20%5Cfrac%7Bc_p-c_v%7D%7Bc_v%7D%0A"></p>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>The following R code should defines the values, including some read from specific heat tables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">T <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb1-2">V <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Values @ 500 K</span></span>
<span id="cb1-4">c_p_CO2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.014e3</span></span>
<span id="cb1-5">c_v_CO2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.825e3</span></span>
<span id="cb1-6">c_p_N2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.056e3</span></span>
<span id="cb1-7">c_v_N2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.759e3</span></span></code></pre></div>
</div>
<p>Now, we define the function to be zeroed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb2-2">  c_p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>c_p_CO2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>c_p_N2</span>
<span id="cb2-3">  c_v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>c_v_CO2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>c_v_N2</span>
<span id="cb2-4">  </span>
<span id="cb2-5">  V<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(c_p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (c_p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c_v)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>c_v</span>
<span id="cb2-6">}</span></code></pre></div>
</div>
<p>A good first check is to see how this function behaves:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curve</span>(f,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fpfortkamp.com/post/mixture/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>There is indeed a zero! Let‚Äôs find it; the following built-in function finds a zero in the given interval:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">x_CO2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uniroot</span>(f,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x_CO2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$root
[1] 0.8359597

$f.root
[1] -1.041024e-06

$iter
[1] 3

$init.it
[1] NA

$estim.prec
[1] 6.103516e-05</code></pre>
</div>
</div>
<p>which gives the answer that a mixture of 83,6% of carbon dioxide and (100-83,6)% at 500 K will have a speed of sound of 360 m/s.</p>
<p>You see that basic assumption was adding up the specific heats, which is not valid always. For instance, in steam power plants, you have compressed steam flowing in the system; if you have air that infiltrate the pipes, you‚Äôll have a mixture of steam and air, and at the typical high pressures of boilers the specific heat of this mixture <em>will not be</em> the sum of individual specific heats, weighted by the mass fractions. A more appropriate mixture rule will be required. The ideal gases model for combustion gases, tough, is widely used.</p>
<p>[1]: √áengel, Y. A., &amp; Boles, M. A. Termodin√¢mica (7 ed.). Porto Alegre: AMGH, 2013. In Portuguese</p>


</section>

 ]]></description>
  <category>Exercise from √áengel&#39;s Thermodynamics</category>
  <guid>https://fpfortkamp.com/post/mixture/</guid>
  <pubDate>Mon, 14 Mar 2022 03:00:00 GMT</pubDate>
</item>
<item>
  <title>What is this site</title>
  <dc:creator>F√°bio P. Fortkamp</dc:creator>
  <link>https://fpfortkamp.com/post/whats/</link>
  <description><![CDATA[ 





<p>Hi there. I‚Äôm F√°bio Fortkamp, a Professor of Mechanical Engineering from Brazil. This is my academic website, where I post explorations in Thermal Engineering, R, Python, and Mechanical Engineering in general.</p>
<p>This site is my attempt to more properly <a href="https://amzn.to/3K3HhhE">show my work</a>. As I study, prepare for lectures, and develop my research, I will try to post my discoveries here. In particular, at least in this stage, I will focus on solving problems on Thermodynamics, Heat Transfer, Heat Engines, Refrigeration Systems using computational tools. Python and R are the main tools I use; my mission is to make the next generation of Engineers more apt to solve real-life problems with data science and programming concepts. More exploration, and less memorization.</p>
<p>Thanks in advance for reading.</p>



 ]]></description>
  <category>Notes</category>
  <guid>https://fpfortkamp.com/post/whats/</guid>
  <pubDate>Sun, 27 Feb 2022 03:00:00 GMT</pubDate>
</item>
</channel>
</rss>
