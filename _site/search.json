[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi there. I’m Dr. Fábio P. Fortkamp, I scientific software developer from southern Brazil.and in this blog I write about solving real Mechanical Engineering problems with Python, R, and other cool computational tools and apps."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education:",
    "text": "Education:\nDoctorate (Dr. Eng.) in Mechanical Engineering Federal University of Santa Catarina, 2019\nMaster’s (M. Eng.) in Mechanical Engineering Federal University of Santa Catarina, 2014\nBachelor in Mechanical Engineering Federal University of Santa Catarina, 2012"
  },
  {
    "objectID": "about.html#research-and-professional-interests",
    "href": "about.html#research-and-professional-interests",
    "title": "About",
    "section": "Research and professional interests",
    "text": "Research and professional interests\n\nMagnetocaloric Refrigeration\nMachine Learning\nMixture Thermodynamics\nMultiphysics Problems\nMultiphase Heat Transfer"
  },
  {
    "objectID": "posts/2022-03-14-isothermic/index.html",
    "href": "posts/2022-03-14-isothermic/index.html",
    "title": "Computing the work of a mixture of gases - Exercises 13-94 and 13-95 from Çengel’s Thermodynamics book",
    "section": "",
    "text": "In the previous post, we saw how to calculate the speed of sound of a mixture of ideal gases, the main assumption is that we can add the individual specific heats of the components, weighted by the mass fractions.\nFor mixtures of ideal gases, this is true for all mass-specific properties, including the gas constant \\(R\\). Hence, basic First-Law analyses can be performed quite easily."
  },
  {
    "objectID": "posts/2022-03-14-isothermic/index.html#an-example-of-isothermic-work",
    "href": "posts/2022-03-14-isothermic/index.html#an-example-of-isothermic-work",
    "title": "Computing the work of a mixture of gases - Exercises 13-94 and 13-95 from Çengel’s Thermodynamics book",
    "section": "An example of isothermic work",
    "text": "An example of isothermic work\nThe specific work required to compress an ideal gas in a closed system [1] isothermally at \\(T\\) from pressure \\(P_1\\) to \\(P_2\\) is [1]:\n\\[\nw_{\\mathrm{comp}} = R T \\ln \\frac{P_2}{P_1}\n\\]\nThis is also valid for a mixture of ideal gases, provided the mixture gas constant is used:\n\\[\nR = \\frac{R_u}{M_{\\mathrm{m}}}\n\\]\nwhere \\(R_u = 8.31447\\,\\mathrm{kJ/kg K}\\) is the universal gas constant and the mixture molar mass is:\n\\[\nM_{\\mathrm{m}} = \\sum_{i=1}^k y_i M_i\n\\]\nsumming over \\(k\\) components, and there \\(y_i\\) and \\(M_i\\) are the individual molar fractions and molar mass of component \\(i\\), respectively.\nConsider exercise 13-94 from [1]: the mixture contains 85% of nitrogen gas, and the remainder is carbon dioxide. The temperature is held at 300 K and the pressure is risen from 100 kPa to 500 kPa. What is the compression work?\nThe following implementation is in R. We first define a function to compute the desired value based on the initial content of nitrogen:\n\nwork.N2.CO2 &lt;- function(yN2) {\n  MN2 &lt;- 28.013\n  MCO2 &lt;- 44.01\n  Ru &lt;-  8.13447\n  T &lt;- 300\n  P1 &lt;- 100\n  P2 &lt;- 500\n  \n  Mm &lt;- yN2*MN2 + (1-yN2)*MCO2\n  R = Ru/Mm\n  \n  wcomp &lt;- R*T*log(P2/P1)\n  wcomp\n}\n\nLet’s check with the individual given value:\n\nprint(work.N2.CO2(0.85))\n\n[1] 129.1433\n\n\nNotice that this value is in kJ/kg.\nNow, let’s see how this varies with nitrogen content:\n\ncurve(work.N2.CO2,from=0,to=1)\n\n\n\n\n\n\n\n\nThe more nitrogen we have, the larger the work. Why is that? Nitrogen is lighter (compare the molar masses), so with more nitrogen the mixture molar mass decreases, but that increases the gas constant and hence the specific work. The overall volume variations increase with a lighter gas, increasing the required work to increase the pressure."
  },
  {
    "objectID": "posts/2022-03-14-isothermic/index.html#an-example-of-isentropic-work",
    "href": "posts/2022-03-14-isothermic/index.html#an-example-of-isentropic-work",
    "title": "Computing the work of a mixture of gases - Exercises 13-94 and 13-95 from Çengel’s Thermodynamics book",
    "section": "An example of isentropic work",
    "text": "An example of isentropic work\nNow we examine Exercise 13-95 from [1], where are given directly the mixture molar mass of 32 kg/kmol and a specific heat ratio of 1.35; as we’ve discussed, these are obtained from weighted sums. The initial state is 100 kPa and 293 K, the final pressure 1000 kPa, and the process occurs at constant entropy. What is the work?\nThe compression work of an ideal gas in an isentropic process is:\n\\[\nw_{\\mathrm{comp}} = \\frac{R T_1}{k-1} \\left[\\left(\\frac{P_2}{P_1}\\right)^{{\\frac{k-1}{k}}}-1\\right]\n\\] Can we use this expression of a single ideal gas for a mixture of ideal gases? Again yes, provide we use the mixture properties, which are already given. Notice that the mixture gas constant is not given but can be calculated similarly as above. Hence:\n\nk &lt;-  1.35\nMm &lt;- 32\nRu &lt;-  8.13447\nR &lt;- Ru/Mm \n\nP1 &lt;- 100\nP2 &lt;- 1000\nT1 &lt;- 293\n\n# some intermediate parameters to facilitate writing\nPi = P2/P1\ngamma = ((k-1)/k)\nY = Pi^gamma - 1\n\nwcomp &lt;- (R*T1)/(k-1) * Y\nprint(wcomp) # in kJ/kg\n\n[1] 173.7753\n\n\nTo compare, we can also compute the work by temperature variations. An isentropic process follows \\[\n\\frac{T_2}{T_1} = \\left(\\frac{P_2}{P_1}\\right)^{\\frac{k-1}{k}}\n\\]\nand, in an adiabatic closed-system process:\n\\[\nw_{\\mathrm{comp}} = c_v(T_2-T_1)\n\\]\nwhere \\(c_v = \\frac{R}{k-1}\\).\n\nk &lt;-  1.35\nMm &lt;- 32\nRu &lt;-  8.13447\nR &lt;- Ru/Mm \n\nP1 &lt;- 100\nP2 &lt;- 1000\nT1 &lt;- 293\n\nT2 &lt;- T1*(P2/P1)^((k-1)/k)\ncv &lt;- R/(k-1)\nwcomp &lt;- cv*(T2-T1)\nprint(wcomp)\n\n[1] 173.7753\n\n\nAnd the values match."
  },
  {
    "objectID": "posts/2022-03-14-isothermic/index.html#references",
    "href": "posts/2022-03-14-isothermic/index.html#references",
    "title": "Computing the work of a mixture of gases - Exercises 13-94 and 13-95 from Çengel’s Thermodynamics book",
    "section": "References",
    "text": "References\n[1]: Çengel, Y. A., & Boles, M. A. Termodinâmica (7 ed.). Porto Alegre: AMGH, 2013. In Portuguese."
  },
  {
    "objectID": "posts/2022-02-27-what-is-this-site/index.html",
    "href": "posts/2022-02-27-what-is-this-site/index.html",
    "title": "What is this site",
    "section": "",
    "text": "Hi there. I’m Fábio Fortkamp, a Professor of Mechanical Engineering from Brazil. This is my academic website, where I post explorations in Thermal Engineering, R, Python, and Mechanical Engineering in general.\nThis site is my attempt to more properly show my work. As I study, prepare for lectures, and develop my research, I will try to post my discoveries here. In particular, at least in this stage, I will focus on solving problems on Thermodynamics, Heat Transfer, Heat Engines, Refrigeration Systems using computational tools. Python and R are the main tools I use; my mission is to make the next generation of Engineers more apt to solve real-life problems with data science and programming concepts. More exploration, and less memorization.\nThanks in advance for reading."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fábio P. Fortkamp’s website",
    "section": "",
    "text": "Why and how to use different colors in VS Code for different projects\n\n\n\n\n\n\nArticles\n\n\n\n\n\n\n\n\n\nDec 21, 2022\n\n\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\nI’m a Python developer - and this is why I’m learning Julia\n\n\n\n\n\n\nArticles\n\n\n\n\n\n\n\n\n\nDec 13, 2022\n\n\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\nWhy a mechanical engineer uses Linux - in Windows\n\n\n\n\n\n\nArticles\n\n\n\n\n\n\n\n\n\nDec 2, 2022\n\n\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\nCompressibility and Expandability: what are they and how to calculate\n\n\n\n\n\n\nArticles\n\n\n\n\n\n\n\n\n\nNov 10, 2022\n\n\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\nStages of studying: 1 - Inspectional Reading\n\n\n\n\n\n\nArticles\n\n\n\n\n\n\n\n\n\nNov 9, 2022\n\n\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\n3 things missing from the Mechanical Engineering curriculum\n\n\n\n\n\n\nLists\n\n\n\n\n\n\n\n\n\nNov 8, 2022\n\n\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\nIncluding superheat in the compressor regression\n\n\n\n\n\n\nArticles\n\n\n\n\n\n\n\n\n\nApr 20, 2022\n\n\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\nExploring and regressing data from a compressor datasheet with Python\n\n\n\n\n\n\nArticles\n\n\n\n\n\n\n\n\n\nApr 19, 2022\n\n\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Law Analysis of a Mixture of Non-Ideal Gases - Exercise 13-99 from Çengel's Thermodynamics book (7th ed)\n\n\n \n\n\nExercise from Çengel's Thermodynamics\n\n\n \n\n\n\n\n\n`Mar 18, 2022`{=html}\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalculting equilibrium composition of a mixture of gases - Exercise 16-89 from Çengel's Thermodynamics book (7th ed)\n\n\n \n\n\nExercise from Çengel's Thermodynamics\n\n\n \n\n\n\n\n\n`Mar 17, 2022`{=html}\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Law Analysis of a Mixture of Ideal Gases - Exercise 13-97 from Çengel's Thermodynamics book (7th ed)\n\n\n \n\n\nExercise from Çengel's Thermodynamics\n\n\n \n\n\n\n\n\n`Mar 15, 2022`{=html}\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComputing the work of a mixture of gases - Exercises 13-94 and 13-95 from Çengel's Thermodynamics book\n\n\n \n\n\nExercise from Çengel's Thermodynamics\n\n\n \n\n\n\n\n\n`Mar 15, 2022`{=html}\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpeed of sound of a mixture of gases - Exercise 13-92 from Çengel's Thermodynamics book (7th ed)\n\n\n \n\n\nExercise from Çengel's Thermodynamics\n\n\n \n\n\n\n\n\n`Mar 14, 2022`{=html}\nFábio P. Fortkamp\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is this site\n\n\n\n\n\n\nNotes\n\n\n\n\n\n\n\n\n\nFeb 27, 2022\n\n\nFábio P. Fortkamp\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "post/mixture/index.html",
    "href": "post/mixture/index.html",
    "title": "Speed of sound of a mixture of gases - Exercise 13-92 from Çengel’s Thermodynamics book (7th ed)",
    "section": "",
    "text": "Why do we need a separate mixture thermodynamics subject? Because, when two fluids are mixed, the individual properties do not necessarily add up to the total system, due to interaction effects.\nAs usual in Thermodynamics, we need a reference model, and the ideal model for mixtures is an ideal gas mixture, where certain properties are simply the weighted sum of the properties of the components."
  },
  {
    "objectID": "post/mixture/index.html#calculating-the-speed-of-sound-of-a-mixture-of-ideal-gases",
    "href": "post/mixture/index.html#calculating-the-speed-of-sound-of-a-mixture-of-ideal-gases",
    "title": "Speed of sound of a mixture of gases - Exercise 13-92 from Çengel’s Thermodynamics book (7th ed)",
    "section": "Calculating the speed of sound of a mixture of ideal gases",
    "text": "Calculating the speed of sound of a mixture of ideal gases\nAs an example, let’s us solve Exercise 13-92 from [1]: a mixture of carbon dioxide and nitrogen flows through a convergent nozzle, and it exits at 500 K and a speed of 360 m/s, which is stated as the speed of sound of the mixture in that condition. What is the mass fraction of carbon dioxide in this mixture?\nFirst, some context. Carbon dioxide and nitrogen are common combustion products: gases that are formed when hydrocarbons burn with air. Other compounds are formed, such as water vapor, sulfur oxides and excess oxygen, but depending on the fuel composition and air context, carbon dioxide and nitrogen dominate the gases, and we approximate the combustion gas as a mixture of just these two gases. Convergent nozzles are commonly employed in airplane jet turbines to accelerate the fluid (the combustion gases) and generate thrust.\nLet \\(x_{\\mathrm{CO_2}}\\) be the mass fraction of carbon dioxide in the mixture, and hence \\(x_{\\mathrm{N_2}} = 1 - x_{\\mathrm{CO_2}}\\).\nWe’ll assume both components are ideal gases in the problem’s conditions, and a mixture of ideal gases is itself an ideal gas. The speed of sound for these fluids is [1]:\n\\[\nc^2 = k R T\n\\]\nwhere \\(k\\) is the ratio of isobaric to isovolumetric specific heats, and \\(R\\) is the difference between then:\n\\[\nkR = \\frac{c_p}{c_v}\\left(c_p - c_v\\right)\n\\]\nNow, the specific heats is a property that is additive:\n\\[\nc_p = x_{\\mathrm{CO_2}}c_{p,\\mathrm{CO_2}} (T) + \\left(1-x_{\\mathrm{CO_2}}\\right)c_{p,\\mathrm{N_2}} (T)\n\\]\n\\[\nc_v = x_{\\mathrm{CO_2}}c_{v,\\mathrm{CO_2}} (T) + \\left(1-x_{\\mathrm{CO_2}}\\right)c_{v,\\mathrm{N_2}} (T)\n\\] where, since the temperature is fixed, the individual values of specific heats can be read from a table.\nIf the given speed is the speed of sound, then \\(V^2 = c^2  = kRT\\), and with some rearranging the following function will achieve a zero:\n\\[\nf(x_{\\mathrm{CO_2}}) = \\frac{V^2}{c_p T} - \\frac{c_p-c_v}{c_v}\n\\]"
  },
  {
    "objectID": "post/mixture/index.html#implementation",
    "href": "post/mixture/index.html#implementation",
    "title": "Speed of sound of a mixture of gases - Exercise 13-92 from Çengel’s Thermodynamics book (7th ed)",
    "section": "Implementation",
    "text": "Implementation\nThe following R code should defines the values, including some read from specific heat tables:\n\nT &lt;- 500\nV &lt;- 360\n# Values @ 500 K\nc_p_CO2 &lt;- 1.014e3\nc_v_CO2 &lt;- 0.825e3\nc_p_N2 &lt;- 1.056e3\nc_v_N2 &lt;- 0.759e3\n\nNow, we define the function to be zeroed:\n\nf &lt;- function(x) {\n  c_p &lt;-  x*c_p_CO2 + (1-x)*c_p_N2\n  c_v &lt;-  x*c_v_CO2 + (1-x)*c_v_N2\n  \n  V^2/(c_p*T) - (c_p - c_v)/c_v\n}\n\nA good first check is to see how this function behaves:\n\ncurve(f,from=0,to=1)\n\n\n\n\n\n\n\n\nThere is indeed a zero! Let’s find it; the following built-in function finds a zero in the given interval:\n\nx_CO2 &lt;- uniroot(f,c(0,1))\nprint(x_CO2)\n\n$root\n[1] 0.8359597\n\n$f.root\n[1] -1.041024e-06\n\n$iter\n[1] 3\n\n$init.it\n[1] NA\n\n$estim.prec\n[1] 6.103516e-05\n\n\nwhich gives the answer that a mixture of 83,6% of carbon dioxide and (100-83,6)% at 500 K will have a speed of sound of 360 m/s.\nYou see that basic assumption was adding up the specific heats, which is not valid always. For instance, in steam power plants, you have compressed steam flowing in the system; if you have air that infiltrate the pipes, you’ll have a mixture of steam and air, and at the typical high pressures of boilers the specific heat of this mixture will not be the sum of individual specific heats, weighted by the mass fractions. A more appropriate mixture rule will be required. The ideal gases model for combustion gases, tough, is widely used.\n[1]: Çengel, Y. A., & Boles, M. A. Termodinâmica (7 ed.). Porto Alegre: AMGH, 2013. In Portuguese"
  },
  {
    "objectID": "post/isothermic/index.html",
    "href": "post/isothermic/index.html",
    "title": "Computing the work of a mixture of gases - Exercises 13-94 and 13-95 from Çengel’s Thermodynamics book",
    "section": "",
    "text": "In the previous post, we saw how to calculate the speed of sound of a mixture of ideal gases, the main assumption is that we can add the individual specific heats of the components, weighted by the mass fractions.\nFor mixtures of ideal gases, this is true for all mass-specific properties, including the gas constant \\(R\\). Hence, basic First-Law analyses can be performed quite easily."
  },
  {
    "objectID": "post/isothermic/index.html#an-example-of-isothermic-work",
    "href": "post/isothermic/index.html#an-example-of-isothermic-work",
    "title": "Computing the work of a mixture of gases - Exercises 13-94 and 13-95 from Çengel’s Thermodynamics book",
    "section": "An example of isothermic work",
    "text": "An example of isothermic work\nThe specific work required to compress an ideal gas in a closed system [1] isothermally at \\(T\\) from pressure \\(P_1\\) to \\(P_2\\) is [1]:\n\\[\nw_{\\mathrm{comp}} = R T \\ln \\frac{P_2}{P_1}\n\\]\nThis is also valid for a mixture of ideal gases, provided the mixture gas constant is used:\n\\[\nR = \\frac{R_u}{M_{\\mathrm{m}}}\n\\]\nwhere \\(R_u = 8.31447\\,\\mathrm{kJ/kg K}\\) is the universal gas constant and the mixture molar mass is:\n\\[\nM_{\\mathrm{m}} = \\sum_{i=1}^k y_i M_i\n\\]\nsumming over \\(k\\) components, and there \\(y_i\\) and \\(M_i\\) are the individual molar fractions and molar mass of component \\(i\\), respectively.\nConsider exercise 13-94 from [1]: the mixture contains 85% of nitrogen gas, and the remainder is carbon dioxide. The temperature is held at 300 K and the pressure is risen from 100 kPa to 500 kPa. What is the compression work?\nThe following implementation is in R. We first define a function to compute the desired value based on the initial content of nitrogen:\n\nwork.N2.CO2 &lt;- function(yN2) {\n  MN2 &lt;- 28.013\n  MCO2 &lt;- 44.01\n  Ru &lt;-  8.13447\n  T &lt;- 300\n  P1 &lt;- 100\n  P2 &lt;- 500\n  \n  Mm &lt;- yN2*MN2 + (1-yN2)*MCO2\n  R = Ru/Mm\n  \n  wcomp &lt;- R*T*log(P2/P1)\n  wcomp\n}\n\nLet’s check with the individual given value:\n\nprint(work.N2.CO2(0.85))\n\n[1] 129.1433\n\n\nNotice that this value is in kJ/kg.\nNow, let’s see how this varies with nitrogen content:\n\ncurve(work.N2.CO2,from=0,to=1)\n\n\n\n\n\n\n\n\nThe more nitrogen we have, the larger the work. Why is that? Nitrogen is lighter (compare the molar masses), so with more nitrogen the mixture molar mass decreases, but that increases the gas constant and hence the specific work. The overall volume variations increase with a lighter gas, increasing the required work to increase the pressure."
  },
  {
    "objectID": "post/isothermic/index.html#an-example-of-isentropic-work",
    "href": "post/isothermic/index.html#an-example-of-isentropic-work",
    "title": "Computing the work of a mixture of gases - Exercises 13-94 and 13-95 from Çengel’s Thermodynamics book",
    "section": "An example of isentropic work",
    "text": "An example of isentropic work\nNow we examine Exercise 13-95 from [1], where are given directly the mixture molar mass of 32 kg/kmol and a specific heat ratio of 1.35; as we’ve discussed, these are obtained from weighted sums. The initial state is 100 kPa and 293 K, the final pressure 1000 kPa, and the process occurs at constant entropy. What is the work?\nThe compression work of an ideal gas in an isentropic process is:\n\\[\nw_{\\mathrm{comp}} = \\frac{R T_1}{k-1} \\left[\\left(\\frac{P_2}{P_1}\\right)^{{\\frac{k-1}{k}}}-1\\right]\n\\] Can we use this expression of a single ideal gas for a mixture of ideal gases? Again yes, provide we use the mixture properties, which are already given. Notice that the mixture gas constant is not given but can be calculated similarly as above. Hence:\n\nk &lt;-  1.35\nMm &lt;- 32\nRu &lt;-  8.13447\nR &lt;- Ru/Mm \n\nP1 &lt;- 100\nP2 &lt;- 1000\nT1 &lt;- 293\n\n# some intermediate parameters to facilitate writing\nPi = P2/P1\ngamma = ((k-1)/k)\nY = Pi^gamma - 1\n\nwcomp &lt;- (R*T1)/(k-1) * Y\nprint(wcomp) # in kJ/kg\n\n[1] 173.7753\n\n\nTo compare, we can also compute the work by temperature variations. An isentropic process follows \\[\n\\frac{T_2}{T_1} = \\left(\\frac{P_2}{P_1}\\right)^{\\frac{k-1}{k}}\n\\]\nand, in an adiabatic closed-system process:\n\\[\nw_{\\mathrm{comp}} = c_v(T_2-T_1)\n\\]\nwhere \\(c_v = \\frac{R}{k-1}\\).\n\nk &lt;-  1.35\nMm &lt;- 32\nRu &lt;-  8.13447\nR &lt;- Ru/Mm \n\nP1 &lt;- 100\nP2 &lt;- 1000\nT1 &lt;- 293\n\nT2 &lt;- T1*(P2/P1)^((k-1)/k)\ncv &lt;- R/(k-1)\nwcomp &lt;- cv*(T2-T1)\nprint(wcomp)\n\n[1] 173.7753\n\n\nAnd the values match."
  },
  {
    "objectID": "post/isothermic/index.html#references",
    "href": "post/isothermic/index.html#references",
    "title": "Computing the work of a mixture of gases - Exercises 13-94 and 13-95 from Çengel’s Thermodynamics book",
    "section": "References",
    "text": "References\n[1]: Çengel, Y. A., & Boles, M. A. Termodinâmica (7 ed.). Porto Alegre: AMGH, 2013. In Portuguese."
  },
  {
    "objectID": "post/whats/index.html",
    "href": "post/whats/index.html",
    "title": "What is this site",
    "section": "",
    "text": "Hi there. I’m Fábio Fortkamp, a Professor of Mechanical Engineering from Brazil. This is my academic website, where I post explorations in Thermal Engineering, R, Python, and Mechanical Engineering in general.\nThis site is my attempt to more properly show my work. As I study, prepare for lectures, and develop my research, I will try to post my discoveries here. In particular, at least in this stage, I will focus on solving problems on Thermodynamics, Heat Transfer, Heat Engines, Refrigeration Systems using computational tools. Python and R are the main tools I use; my mission is to make the next generation of Engineers more apt to solve real-life problems with data science and programming concepts. More exploration, and less memorization.\nThanks in advance for reading."
  },
  {
    "objectID": "post/missing/index.html",
    "href": "post/missing/index.html",
    "title": "3 things missing from the Mechanical Engineering curriculum",
    "section": "",
    "text": "In 2020, I ended my post-doc position and started teaching Mechanical Engineering classes (in a different university). I loved the teaching experience, and I learned a lot. One month ago, however, in search of new challenges, I quit that job and got accepted at a research-only position, dealing directly with industry problems. And in only one month, I realized how much has to be changed in Mechanical Engineering curricula, to make it more modern and more aligned with practical, real problems. These are my suggestions:\n\nProper software development: Mechanical Engineering is not Computer Science. Maybe we don’t need to learn about Turing Machines, Cryptography, or Web Sockets. But my present job is the second time in my career that my primary role is implementing models in software to be used by other people, and I didn’t learn any software development in school. Students should learn more about testing, version control, different programming languages, debugging.\nMore advanced Thermodynamics: in retrospect, I think I severely underestimated my student’s ability to understand deep theories. The Refrigeration and Oil industries are primary examples where blends or mixtures of fluids are used, and in my experience students have no contact with more advanced Equations of State; there is an enormous gap between “using the ideal gas law” and “just getting the properties from a table”. But guess what: these tables are not magical, they were generated with Equations of State, and the people using them do not understand these equations.\nStudying techniques: I started teaching shortly after the pandemic; I then taught classes online, and went back to in-person classes. And what I saw is that the younger generation completely forgot how to study with full focus. I’m not talking about spending the entire weekend studying for an exam, but rather the Cal Newport style of deep work, in short but intense bursts.\n\nTo be clear: I’m not “fighting the system”. These are things that I would change if I went back to the classroom, in my own classes. Teaching Mechanical Engineering made me love the profession more than ever, and I want it to evolve - always.\nAny thoughts. Comment on Twitter or leave a note below!"
  },
  {
    "objectID": "post/first/index.html",
    "href": "post/first/index.html",
    "title": "First Law Analysis of a Mixture of Ideal Gases - Exercise 13-97 from Çengel’s Thermodynamics book (7th ed)",
    "section": "",
    "text": "This is exercise 13-97 from [1]: a mixture of gases composed of 55% of nitrogen gas and 45% of carbon dioxide (in mass) is originally at 200 kPa and 45 ˚C. The system is heated up and expands, but due to the action of a spring, the pressure variation as a function of volume \\(P(\\mathcal{V})\\) follows:\n\\[\nP = A + K \\mathcal{V}\n\\] where \\(A = 111.111\\,\\mathrm{kPa}\\) and \\(K = 888.89\\,\\mathrm{kPa/m^3}\\). During the heating, volume doubles; what is the work and heat transfers associated with the process?\nFor that, in contrast with the previous posts, now we’ll use Python and the pyromat package, which I’ve just discovered today.\nWith the added heat, the system will expand and perform work, which can be calculated using only mechanics:\n\\[\nW = \\int_{\\mathcal{V}_1}^{\\mathcal{V}_2} P \\mathrm{d}\\mathcal{V}\n\\]\nWhere the initial volume can be obtained from the given pressure variation, and the final volume is double that:\nA = 111.111\nK = 888.89\n\nP1 = 200\nV1 = (P1-A)/K\nprint(\"V1 = %.2f m3\" %(V1))\nV2 = 2*V1\n\nV1 = 0.10 m3\nThe integration above gives:\n\\[\nW = A * (\\mathcal{V}_2 - \\mathcal{V}_1) + \\frac{K}{2}\\left(\\mathcal{V}_2^2 - \\mathcal{V}_1^2\\right)\n\\]\nand calculating it:\nW = A*(V2-V1) + K/2*(V2**2 - V1**2)\nprint(\"W = %.2f kJ\" %(W,))\n\nW = 24.44 kJ\nTo compute the heat added to the system, a First Law analysis reads:\n\\[\nQ = W + \\Delta U = W + m c_v (T_2-T_1)\n\\]\nwhere, assuming a mixture of ideal gases (an hypothesis not used so far!), all mass-specific properties are additive. The gas constant is:\n\\[\nR = \\sum_{i=1}^k x_i R_i\n\\] where \\(k = 2\\) components, \\(x_i\\) is the individual mass fraction and \\(R_i\\) the individual gas constant. The gas constant is needed to compute the temperature variation; at state 1, the mass (which is constant in all states for a closed system) is computed from the ideal gas equation of state:\n\\[\nm = \\frac{P_1 V_1}{R T_1}\n\\]\nand now, applying the same equation for state 2:\n\\[\nT_2 = \\frac{P_2 V_2}{m R}\n\\]\nwhere \\(P_2\\) can be obtained from the pressure-volume equation.\nThe constant-volume specific heat for ideal gases is a function of temperature only, and for better accuracy can be calculated at the average temperature. The mixture specific heat is computed similarly to the gas constant above.\nThe pyromat library has function to create ideal gas “objects” and then access constants and functions as illustrated below:\nimport pyromat as pm\nN2 = pm.get(\"ig.N2\") # ig = ideal gas model\nCO2 = pm.get(\"ig.CO2\")\n\nxN2 = 0.55\nxCO2 = 1-xN2\n\n# each object has a .R() method to calculate the gas constant\n# the default units are kJ, kPa, m3, K, kmol\nR = xN2*N2.R() + xCO2*CO2.R()\n\nT1 = 45 + 273\nm = (P1*V1)/(R*T1)\n\nP2 = A + K*V2\nT2 = (P2*V2)/(m*R)\n\nTmean = (T1 + T2)/2\n\ncv = xN2*N2.cv(T=Tmean) + xCO2*CO2.cv(T=Tmean)\n\nQ = W + m*cv*(T2-T1)\nprint(\"Q = %.2f kJ\" %(Q,))\n\nQ = 151.26 kJ\n\n\n/tmp/ipykernel_205294/1406596206.py:23: DeprecationWarning: Conversion of an array with ndim &gt; 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  print(\"Q = %.2f kJ\" %(Q,))"
  },
  {
    "objectID": "post/first/index.html#references",
    "href": "post/first/index.html#references",
    "title": "First Law Analysis of a Mixture of Ideal Gases - Exercise 13-97 from Çengel’s Thermodynamics book (7th ed)",
    "section": "References",
    "text": "References\n[1]: Çengel, Y. A., & Boles, M. A. Termodinâmica (7 ed.). Porto Alegre: AMGH, 2013."
  },
  {
    "objectID": "post/inspectional/index.html",
    "href": "post/inspectional/index.html",
    "title": "Stages of studying: 1 - Inspectional Reading",
    "section": "",
    "text": "Adler and Van Doren’s How to Read a Book is one of the my favorite books. Although the authors talk about “normal” books (fiction, non-fiction, poetry), I think most of its teachings apply to textbooks and other materials to study in an academic sense.\nThis is the first in a series of posts detailing how I study hard materials and try to extract the most knowledge from them."
  },
  {
    "objectID": "post/inspectional/index.html#studying-in-stages",
    "href": "post/inspectional/index.html#studying-in-stages",
    "title": "Stages of studying: 1 - Inspectional Reading",
    "section": "Studying in stages",
    "text": "Studying in stages\nThe basic premise of the book, and something that I apply to almost everything I read, is that reading or studying should be done in stages. I felt quite at home when Adler and van Doren talk about the classic error of trying to read a difficult book, stumping into the first hard concept, and then being stuck for hours in the same chapter - without even understanding what the book is about. Depending on the book level, you will not understand it in the first reading.\nHence, when you have anything to read in front of you, the first step is to do an Inspectional Reading - a high-level form of reading, aiming for general concepts and the overall structure of the book or document, without wasting time on details."
  },
  {
    "objectID": "post/inspectional/index.html#what-to-look-when-inspectional-reading",
    "href": "post/inspectional/index.html#what-to-look-when-inspectional-reading",
    "title": "Stages of studying: 1 - Inspectional Reading",
    "section": "What to look when inspectional reading",
    "text": "What to look when inspectional reading\nThe authors of How to Read a Book make it clear: inspectional reading is active and demand you take notes. Lately I’ve been a fan of taking notes in paper notebooks:\n\n\n\nPhoto of a notebook with notes titles “Inspectional Reading”\n\n\nNotice above what I noted: the overall structure of a Heat Transfer book I was studying, the main themes threated, some comments on the notation used, the main equations that grabbed my attention, and then some tasks to delve deeper.\nWhen I was reading the material above, did I encounter some concepts that I did not understand? Of course! But I did not let it stop me of skimming through the whole book. I was actually looking for some details about differential equations, and I have to say I do not understand them yet – but I do know that this book has some answers, and I know where to look. I need another deep work session to do an analytical reading - subject of another post."
  },
  {
    "objectID": "post/inspectional/index.html#time-constraints",
    "href": "post/inspectional/index.html#time-constraints",
    "title": "Stages of studying: 1 - Inspectional Reading",
    "section": "Time constraints",
    "text": "Time constraints\nIt is fundamental that an inspectional reading is time bounded - an hour, at most. The purpose of this stage is to get answers quickly and not waste time\nHere is another example when I was studying some old class notes:\n\n\n\nPhoto of notebook with notes\n\n\nI was examining these class notes because my father made me take all of my old college notebooks from his home, and while studying the Heat Transfer book I remember of a Linear Systems class that I took in college.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nView this post on Instagram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA post shared by Fábio P. Fortkamp, Dr. Eng. | Mechanical Engineer (@fpfortkamp)\n\n\n\n\nI thought studying these notes might be useful for my projects - but as I completed my Inspectional Reading, I realized this material was not right (for now). I did not have to read two chapters in detail, which would take much more time, to reach that conclusion."
  },
  {
    "objectID": "post/inspectional/index.html#the-other-stages",
    "href": "post/inspectional/index.html#the-other-stages",
    "title": "Stages of studying: 1 - Inspectional Reading",
    "section": "The other stages",
    "text": "The other stages\nStudying is deeply important to me as a researcher, and I treat it seriously. I can only advance in my carrer if I have impactful ideas.\n{{&lt; tweet 1589653650598924289 &gt;}}\nStay tuned for more posts of my study techniques and tips…"
  },
  {
    "objectID": "post/superheat/index.html",
    "href": "post/superheat/index.html",
    "title": "Including superheat in the compressor regression",
    "section": "",
    "text": "We are always learning. After studying more about compressor datasheets, I realized that I forgot to include the superheat in yesterday’s post. Let’s fix that.\nThe main problem is that, in every calculation, I took the inlet state as saturated vapor in the given evaporating temperature, when in reality the datasheet specifies that the vapor always enters at 32.2 ºC.\nSo let’s start again. We will read the dataset with pandas:\nimport pandas as pd\n\ndf = pd.read_csv(\"compressor.csv\",delimiter=',')\nprint(df)\n\n   Evaporating Temperature [C]  Condensing temperature [C]  \\\n0                          -35                          35   \n1                          -30                          35   \n2                          -25                          35   \n3                          -20                          35   \n4                          -15                          35   \n5                          -10                          35   \n\n   Cooling Capacity [W]  Power [W]  Current [A]  Gas Flow Rate [kg/h]  \\\n0                   167        129         1.21                  1.79   \n1                   218        144         1.23                  2.34   \n2                   282        160         1.27                  3.03   \n3                   362        177         1.32                  3.89   \n4                   457        197         1.38                  4.93   \n5                   570        217         1.45                  6.16   \n\n    Efficiency [W/W]  \n0               1.29  \n1               1.52  \n2               1.77  \n3               2.04  \n4               2.33  \n5               2.63\nThe sections below are mostly a repetition, but we’ll update the equations where necessary:"
  },
  {
    "objectID": "post/superheat/index.html#how-to-calculate-the-mass-flow-rate-of-a-compressor",
    "href": "post/superheat/index.html#how-to-calculate-the-mass-flow-rate-of-a-compressor",
    "title": "Including superheat in the compressor regression",
    "section": "How to calculate the mass flow rate of a compressor?",
    "text": "How to calculate the mass flow rate of a compressor?\nA reciprocating compressor like this one is a volumetric machine: it displaces a certain volume of fluid, based on its internal geometry, and the mass flow rate depends on the suction state.\nThe most basic, ideal model is then:\n\\[\n\\dot{m} = \\frac{\\dot{\\mathcal{V}} _{\\mathrm{D}}}{v _{\\mathrm{in}}}\n\\]\nwhere the numerator is the displacement rate; for a compressor with \\(z\\) cylinders at a fixed rotation speed \\(n\\) it can be calculated\n\\[\n\\dot{\\mathcal{V}} _{\\mathrm{D}} = {\\mathcal{V}} _{\\mathrm{D}} n z\n\\]\nwhere \\(\\mathcal{V} _{\\mathrm{D}}\\) is the internal displacement.\nLet’s plot the actual mass flow rate from the datasheet (using the geometric parameters from it) and the above model to compare:\n\nimport matplotlib.pyplot as plt\nfrom CoolProp.CoolProp import PropsSI\nimport numpy as np\n\nplt.rc('font', size=12)\n\nVd = 13.54e-6 # in m3\nn = 60 #Hz\nz = 1\nfluid = 'R600a'\nTreturn = 32.2 + 273\n\nVd_dot = Vd * n * z # m3/s\nT_evap = df[\"Evaporating Temperature [C]\"].values\nm_dot_actual = df[\"Gas Flow Rate [kg/h]\"].values\n\n# we take the inverse of the density \n# of the vapor at the evaporing *pressure*\n# and the return gas temperature\nv_in = np.array([(1.0/PropsSI(\"D\",\"T\",Treturn,\"P\",PropsSI(\"P\",\"T\",Te+273,\"Q\",1,fluid),fluid)) for Te in T_evap])\nm_dot_ideal = 3600*Vd_dot/v_in\n\nfig, ax = plt.subplots()\nax.plot(T_evap,m_dot_ideal,'k-',label=\"Ideal\")\nax.plot(T_evap,m_dot_actual,'ko',label=\"Actual\")\nax.set_xlabel(\"Evaporating temperature [ºC]\")\nax.set_ylabel(\"Gas flow rate [kg/h]\")\nax.legend()\nax.grid()\nplt.show()\n\n\n\n\n\n\n\n\nClearly our model is not good enough! There is a volumetric efficiency that is influenced by dead volumes and leakages:\n\\[\n\\eta_{\\mathrm{v}} = \\frac{\\dot{m}}{\\frac{\\dot{\\mathcal{V}} _{\\mathrm{D}}}{v _{\\mathrm{in}}}}\n\\]\n\neta_v = m_dot_actual/m_dot_ideal*100\nfig2, ax2 = plt.subplots()\n\nax2.plot(T_evap,m_dot_actual,'ko-',label=\"Actual mass flow rate\")\nax2.set_xlabel(\"Evaporating temperature [ºC]\")\nax2.set_ylabel(\"Gas flow rate [kg/h] (dots)\")\n\nax3 = ax2.twinx()\nax3.plot(T_evap,eta_v,'kx--',label=\"Volumetric efficiency\")\nax3.set_ylabel(\"Volumetric efficiency [%] (x)\")\nax2.grid()\n\nplt.show()\n\n\n\n\n\n\n\n\n\nWhat influences the volumetric efficiency?\nThe volumetric efficiency depends primarily on the pressure ratio between condensing and evaporating levels:\n\\[\nr _{\\mathrm{p}} = \\frac{P _{\\mathrm{cond}}}{P _{\\mathrm{evap}}}\n\\]\nSo let’s plot that:\n\neta_v = m_dot_actual/m_dot_ideal\n\nPcond = PropsSI(\"P\",\"T\",df[\"Condensing temperature [C]\"].values[0]+273,\"Q\",1,fluid)\nPevap = np.array([PropsSI(\"P\",\"T\",Te+273,\"Q\",1,fluid) for Te in T_evap])\nrp = Pcond/Pevap\nfig20, ax20 = plt.subplots()\n\n\n\nax20.plot(rp,eta_v,'ko-')\nax20.set_xlabel(\"Pressure ratio\")\nax20.set_ylabel(\"Volumetric efficiency\")\n\nplt.show()\n\n\n\n\n\n\n\n\nMaybe we can use a log-log plot?\n\neta_v = m_dot_actual/m_dot_ideal\n\nPcond = PropsSI(\"P\",\"T\",df[\"Condensing temperature [C]\"].values[0]+273,\"Q\",1,fluid)\nPevap = np.array([PropsSI(\"P\",\"T\",Te+273,\"Q\",1,fluid) for Te in T_evap])\nrp = Pcond/Pevap\nfig20, ax20 = plt.subplots()\n\n\n\nax20.plot(rp,eta_v,'ko-')\nax20.set_xlabel(\"Pressure ratio\")\nax20.set_ylabel(\"Volumetric efficiency\")\nax20.set_yscale('log')\nax20.set_xscale('log')\n\nplt.show()\n\n\n\n\n\n\n\n\nwhich seems to make the relationship linear. A candidate for a model would be then:\n\\[\n\\ln \\eta_{\\mathrm{v}} = b_0 + b_1 \\ln r_{\\mathrm{p}}\n\\]\nAs with yesterday’s post, We will use scikit-learn to train a model to calculate the coefficients, based on 50% of the data selected at random:\n\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nX = np.log(rp).reshape(-1,1)\nY = np.log(eta_v)\n\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.5)\n\nmodel = LinearRegression(fit_intercept=False)\nmodel.fit(X_train, Y_train)\n\nfig4, ax4 = plt.subplots()\nax4.plot(np.log(rp),np.log(eta_v),'ko')\nax4.plot(X,model.predict(X),'k-')\nax4.set_xlabel(\"Log of Pressure ratio\")\nax4.set_ylabel(\"Log of Volumetric efficiency\")\nax4.set_title('accuracy (R^2) =  %.5f'\n% r2_score(Y_test, model.predict(X_test)))\nplt.show()\n\n\n\n\n\n\n\n\nThe advantage of using the pressure ratio as the main feature is that the effect of the superheat degree is probably low, but we need more data with the same pressure ratio and different degrees of superheat to be sure."
  },
  {
    "objectID": "post/superheat/index.html#polynomials-for-cooling-capacity",
    "href": "post/superheat/index.html#polynomials-for-cooling-capacity",
    "title": "Including superheat in the compressor regression",
    "section": "Polynomials for cooling capacity",
    "text": "Polynomials for cooling capacity\nThe other useful thing to do with a compressor datasheet of calculating a polynomial of the form [1]:\n\\[\n\\dot{Q} _{\\mathrm{L}} = a _0 + a _1  t _{\\mathrm{evap}} + a _2  t _{\\mathrm{evap}}^2\n\\]\nwhere \\(\\dot{Q}_{\\mathrm{L}}\\) is the cooling capacity and \\(t_{\\mathrm{evap}}\\) is the evaporating temperature in degress Celsius. Four points of note:\n\nThis polynomial allows you to interpolate in different points other than the tabulated ones, an also can be combined with other models in the refrigeration system;\nThe coefficients themselves are function of the condensing temperature, the fluid properties and the compressor geometry;\nThe same thing can be done for the power consumption, with different coefficients;\nThe resulting polynomial is valid for the same compressor in different evaporating pressures, but keeping the superheat and subcooling degress the same as the values from the datasheet.\n\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\n\nX = df.values[:,:1] # first column (evaporating temperature) as a 2D array, as required\nYQL = df[\"Cooling Capacity [W]\"].values\n\nX_train,X_test,QL_train,QL_test = train_test_split(X,YQL,test_size=0.5)\n\nQL_quadratic_model = Pipeline(\n[\n('poly', PolynomialFeatures(degree=2)),\n('linear', LinearRegression(fit_intercept=False))])\nQL_quadratic_model.fit(X_train, QL_train)\nQL_quadratic_pred = QL_quadratic_model.predict(X_test)\n\nfig4, ax4 = plt.subplots()\nax4.scatter(QL_test,QL_quadratic_pred)\nax4.grid()\nax4.set_xlabel('Simulated cooling capacity [W]]')\nax4.set_ylabel('Predicted cooling capacity [W]')\nax4.set_title('accuracy (R^2) =  %.5f'\n% r2_score(QL_test, QL_quadratic_pred))\nplt.show()\n\n\n\n\n\n\n\n\nThe resulting coefficients are (from \\(a_0\\) to \\(a_2\\)):\n\nprint(QL_quadratic_model.named_steps[\"linear\"].coef_)\n\n[8.47e+02 3.11e+01 3.40e-01]\n\n\nHence, this polynomial seems to work fine, even though we have very few data points; with more data points in a test apparatus, this same model could be retrained, making the coefficients more and more accurate.\nThe advantage of this approach is that, if we are working with this compressor and selecting heat exchangers sizes, for instance, we do not need to evaluate thermophysical properties at each iteration but only a polynomial, which is a huge time saver. How to make this integration between models is the subject of another post."
  },
  {
    "objectID": "post/superheat/index.html#references",
    "href": "post/superheat/index.html#references",
    "title": "Including superheat in the compressor regression",
    "section": "References",
    "text": "References\n[1]: Stoecker, W. F. Design of thermal systems. [sl]: McGraw-Hill, 1980."
  },
  {
    "objectID": "post/color/index.html",
    "href": "post/color/index.html",
    "title": "Why and how to use different colors in VS Code for different projects",
    "section": "",
    "text": "I know what you are going to say: I’m weird, and apparently it makes no sense to spend time on things like this. But here it is: a post about setting different color schemes for VS Code, depending on which folder is open."
  },
  {
    "objectID": "post/color/index.html#why-setting-different-colors-is-good-for-productivity",
    "href": "post/color/index.html#why-setting-different-colors-is-good-for-productivity",
    "title": "Why and how to use different colors in VS Code for different projects",
    "section": "Why setting different colors is good for productivity",
    "text": "Why setting different colors is good for productivity\nFirst, let us say right away: if you spend some any significant time in a program, making it look more pleasant, so that you’ll want to spend more time with it, is super productive. Plus, hacking things is fun, and fun is always a good way to spend time.\nBut there is also a contextual component. CGP Grey illustrates how it is good to compartimentalize your life, to train your brain to associate certain environments with a desire to focus on certain things:\n{{&lt; youtube snAhsXyO3Ck &gt;}}\nIn this case, when I see a particular color scheme, I will immediately start to think about the project associated with those colors. Also, as I work with different projects alternating them within a given day (sometimes using different programming languages), assigning a different color scheme to each project help me differentiate between them."
  },
  {
    "objectID": "post/color/index.html#how-to-set-and-sync-color-schemes-in-vs-code",
    "href": "post/color/index.html#how-to-set-and-sync-color-schemes-in-vs-code",
    "title": "Why and how to use different colors in VS Code for different projects",
    "section": "How to set and sync color schemes in VS Code",
    "text": "How to set and sync color schemes in VS Code\nWhen you configure the editor’s settings, VS Code saves a JSON file with your customizations in a default location (see the aforelinked docs page). One of the settings is the color scheme. For my default color scheme, I like the Solarized Light theme:\n\n\n\nScreenshot of VS Code in the Solarized Light color scheme\n\n\nNow, how can this setting be changed based on the folder you open? It turns out you can open a particular folder in VS Code, which it calls a workspace (workspaces can actually combine different folders). In the Settings UI, you can set it to customize the workspace settings:\n\n\n\nScreenshot of the VS Code settings editor\n\n\nNow, when you save the settings, a settings.json file is created inside the folder you are in; in the figure below, I’ve setup the “local” color theme to a dark version of the solarized scheme - but this gets loaded only when I open up that particular folder!\n\n\n\nScreenshot of VS Code in the Solarized Dark color scheme"
  },
  {
    "objectID": "post/color/index.html#my-color-schemes",
    "href": "post/color/index.html#my-color-schemes",
    "title": "Why and how to use different colors in VS Code for different projects",
    "section": "My color schemes",
    "text": "My color schemes\nI’ll illustrate with two more projects to get you inspired. When I want to mess around with my dotfiles, I use a grey-ish, very utilitarian-looking color scheme (Atom Dark One):\n\n\n\nScreenshot of VS Code in a gray-like color scheme\n\n\nBut when I work in a project involving the Julia language, which is particularly associated with blue-purple colors (check their website), I configured VS Code with the “Tomorrow Night Blue” theme:\n\n\n\nScreenshot of VS Code in a blue-purple color scheme\n\n\nThis is very productive: I can have multiple VS Code windows (working in Julia while tweaking my dotfiles), and when I Alt-TAB the different colors are immediately apparent.\nPlease do tell me if I’m wasting my time…"
  }
]