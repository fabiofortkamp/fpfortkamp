{
  "hash": "dee72a2b7c9e149ef3733c363d6296b9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Including superheat in the compressor regression\nauthor: Fábio P. Fortkamp\ndate: '2022-04-20'\nslug: superheat\ncategories:\n  - Articles\ntags:\n  - compressors\n  - regression\n  - machine learning\n  - python\n  - scikit-learn\n  - refrigeration\n  - pandas\n  - data science\n---\n\nWe are always learning. After studying more about compressor datasheets, I realized that I forgot to include the superheat in [yesterday's](https://fpfortkamp.com/post/compressor/) post. Let's fix that.\n\nThe main problem is that, in every calculation, I took the inlet state as saturated vapor in the given evaporating temperature, when in reality the [datasheet](https://products.embraco.com/commtrol/api/pdf/compressor/datasheet/7187?&condensing_temperature=54.4&evaporating_temperature=-23.3&units=w&units_temp=metric-system&filters%5Bbare%5D=513701421&filters%5Brefrigerant%5D%5B%5D=R-600a&filters%5Bstandard%5D=ASHRAE&filters%5Bfrequency%5D=60)  specifies that the vapor always enters at 32.2 ºC.\n\n\n{{< figure src=\"datasheet.png\" >}}\n\n\n\nSo let's start again. We will read the dataset with [pandas](https://pandas.pydata.org/?msclkid=29caa245bff611ec80ba73d4aced3042):\n\n::: {#60f7b3aa .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.read_csv(\"compressor.csv\",delimiter=',')\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Evaporating Temperature [C]  Condensing temperature [C]  \\\n0                          -35                          35   \n1                          -30                          35   \n2                          -25                          35   \n3                          -20                          35   \n4                          -15                          35   \n5                          -10                          35   \n\n   Cooling Capacity [W]  Power [W]  Current [A]  Gas Flow Rate [kg/h]  \\\n0                   167        129         1.21                  1.79   \n1                   218        144         1.23                  2.34   \n2                   282        160         1.27                  3.03   \n3                   362        177         1.32                  3.89   \n4                   457        197         1.38                  4.93   \n5                   570        217         1.45                  6.16   \n\n    Efficiency [W/W]  \n0               1.29  \n1               1.52  \n2               1.77  \n3               2.04  \n4               2.33  \n5               2.63  \n```\n:::\n:::\n\n\nThe sections below are mostly a repetition, but we'll update the equations where necessary:\n\n## How to calculate the mass flow rate of a compressor?\n\nA reciprocating compressor like this one is a *volumetric* machine: it displaces a certain volume of fluid, based on its internal geometry, and the mass flow rate depends on the suction state.\n\nThe most basic, **ideal** model is then:\n\n$$\n\\dot{m} = \\frac{\\dot{\\mathcal{V}} _{\\mathrm{D}}}{v _{\\mathrm{in}}}\n$$\n\nwhere the numerator is the displacement rate; for a compressor with $z$ cylinders at a fixed rotation speed $n$ it can be calculated\n\n$$\n\\dot{\\mathcal{V}} _{\\mathrm{D}} = {\\mathcal{V}} _{\\mathrm{D}} n z\n$$\n\nwhere $\\mathcal{V} _{\\mathrm{D}}$ is the internal displacement.\n\nLet's plot the actual mass flow rate from the datasheet (using the geometric parameters from it) and the above model to compare:\n\n::: {#12a0a661 .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nfrom CoolProp.CoolProp import PropsSI\nimport numpy as np\n\nplt.rc('font', size=12)\n\nVd = 13.54e-6 # in m3\nn = 60 #Hz\nz = 1\nfluid = 'R600a'\nTreturn = 32.2 + 273\n\nVd_dot = Vd * n * z # m3/s\nT_evap = df[\"Evaporating Temperature [C]\"].values\nm_dot_actual = df[\"Gas Flow Rate [kg/h]\"].values\n\n# we take the inverse of the density \n# of the vapor at the evaporing *pressure*\n# and the return gas temperature\nv_in = np.array([(1.0/PropsSI(\"D\",\"T\",Treturn,\"P\",PropsSI(\"P\",\"T\",Te+273,\"Q\",1,fluid),fluid)) for Te in T_evap])\nm_dot_ideal = 3600*Vd_dot/v_in\n\nfig, ax = plt.subplots()\nax.plot(T_evap,m_dot_ideal,'k-',label=\"Ideal\")\nax.plot(T_evap,m_dot_actual,'ko',label=\"Actual\")\nax.set_xlabel(\"Evaporating temperature [ºC]\")\nax.set_ylabel(\"Gas flow rate [kg/h]\")\nax.legend()\nax.grid()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=580 height=434}\n:::\n:::\n\n\nClearly our model is not good enough! There is a *volumetric efficiency* that is influenced by dead volumes and leakages:\n\n$$\n\\eta_{\\mathrm{v}} = \\frac{\\dot{m}}{\\frac{\\dot{\\mathcal{V}} _{\\mathrm{D}}}{v _{\\mathrm{in}}}}\n$$\n\n::: {#92793e70 .cell execution_count=3}\n``` {.python .cell-code}\neta_v = m_dot_actual/m_dot_ideal*100\nfig2, ax2 = plt.subplots()\n\nax2.plot(T_evap,m_dot_actual,'ko-',label=\"Actual mass flow rate\")\nax2.set_xlabel(\"Evaporating temperature [ºC]\")\nax2.set_ylabel(\"Gas flow rate [kg/h] (dots)\")\n\nax3 = ax2.twinx()\nax3.plot(T_evap,eta_v,'kx--',label=\"Volumetric efficiency\")\nax3.set_ylabel(\"Volumetric efficiency [%] (x)\")\nax2.grid()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=631 height=434}\n:::\n:::\n\n\n### What influences the volumetric efficiency?\n\nThe volumetric efficiency depends primarily on the pressure ratio between condensing and evaporating levels:\n\n$$\nr _{\\mathrm{p}} = \\frac{P _{\\mathrm{cond}}}{P _{\\mathrm{evap}}}\n$$\n\nSo let's plot that:\n\n::: {#9e13c947 .cell execution_count=4}\n``` {.python .cell-code}\neta_v = m_dot_actual/m_dot_ideal\n\nPcond = PropsSI(\"P\",\"T\",df[\"Condensing temperature [C]\"].values[0]+273,\"Q\",1,fluid)\nPevap = np.array([PropsSI(\"P\",\"T\",Te+273,\"Q\",1,fluid) for Te in T_evap])\nrp = Pcond/Pevap\nfig20, ax20 = plt.subplots()\n\n\n\nax20.plot(rp,eta_v,'ko-')\nax20.set_xlabel(\"Pressure ratio\")\nax20.set_ylabel(\"Volumetric efficiency\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=606 height=434}\n:::\n:::\n\n\nMaybe we can use a log-log plot?\n\n::: {#8ce3c15d .cell execution_count=5}\n``` {.python .cell-code}\neta_v = m_dot_actual/m_dot_ideal\n\nPcond = PropsSI(\"P\",\"T\",df[\"Condensing temperature [C]\"].values[0]+273,\"Q\",1,fluid)\nPevap = np.array([PropsSI(\"P\",\"T\",Te+273,\"Q\",1,fluid) for Te in T_evap])\nrp = Pcond/Pevap\nfig20, ax20 = plt.subplots()\n\n\n\nax20.plot(rp,eta_v,'ko-')\nax20.set_xlabel(\"Pressure ratio\")\nax20.set_ylabel(\"Volumetric efficiency\")\nax20.set_yscale('log')\nax20.set_xscale('log')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=650 height=435}\n:::\n:::\n\n\nwhich seems to make the relationship linear. A candidate for a model would be then:\n\n$$\n\\ln \\eta_{\\mathrm{v}} = b_0 + b_1 \\ln r_{\\mathrm{p}}\n$$\n\nAs with yesterday's post, We will use [scikit-learn](https://scikit-learn.org/stable/index.html) to *train* a model to calculate the coefficients, based on 50% of the data selected at random:\n\n::: {#6888aea6 .cell execution_count=6}\n``` {.python .cell-code}\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nX = np.log(rp).reshape(-1,1)\nY = np.log(eta_v)\n\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.5)\n\nmodel = LinearRegression(fit_intercept=False)\nmodel.fit(X_train, Y_train)\n\nfig4, ax4 = plt.subplots()\nax4.plot(np.log(rp),np.log(eta_v),'ko')\nax4.plot(X,model.predict(X),'k-')\nax4.set_xlabel(\"Log of Pressure ratio\")\nax4.set_ylabel(\"Log of Volumetric efficiency\")\nax4.set_title('accuracy (R^2) =  %.5f'\n% r2_score(Y_test, model.predict(X_test)))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=619 height=456}\n:::\n:::\n\n\nThe advantage of using the pressure ratio as the main feature is that the effect of the superheat degree is probably low, but we need more data with the same pressure ratio and different degrees of superheat to be sure.\n\n## Polynomials for cooling capacity\n\nThe other useful thing to do with a compressor datasheet of calculating a polynomial of the form [1]:\n\n$$\n\\dot{Q} _{\\mathrm{L}} = a _0 + a _1  t _{\\mathrm{evap}} + a _2  t _{\\mathrm{evap}}^2\n$$\n\nwhere $\\dot{Q}_{\\mathrm{L}}$ is the cooling capacity and $t_{\\mathrm{evap}}$ is the evaporating temperature in degress Celsius. Four points of note:\n\n1. This polynomial allows you to interpolate in different points other than the tabulated ones, an also can be combined with other models in the refrigeration system;\n2. The coefficients themselves are function of the condensing temperature, the fluid properties and the compressor geometry;\n3. The same thing can be done for the power consumption, with different coefficients;\n4. The resulting polynomial is valid for the same compressor in different evaporating pressures, but keeping the superheat and subcooling degress the same as the values from the datasheet.\n\n::: {#cacfa658 .cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\n\nX = df.values[:,:1] # first column (evaporating temperature) as a 2D array, as required\nYQL = df[\"Cooling Capacity [W]\"].values\n\nX_train,X_test,QL_train,QL_test = train_test_split(X,YQL,test_size=0.5)\n\nQL_quadratic_model = Pipeline(\n[\n('poly', PolynomialFeatures(degree=2)),\n('linear', LinearRegression(fit_intercept=False))])\nQL_quadratic_model.fit(X_train, QL_train)\nQL_quadratic_pred = QL_quadratic_model.predict(X_test)\n\nfig4, ax4 = plt.subplots()\nax4.scatter(QL_test,QL_quadratic_pred)\nax4.grid()\nax4.set_xlabel('Simulated cooling capacity [W]]')\nax4.set_ylabel('Predicted cooling capacity [W]')\nax4.set_title('accuracy (R^2) =  %.5f'\n% r2_score(QL_test, QL_quadratic_pred))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=601 height=456}\n:::\n:::\n\n\nThe resulting coefficients are (from $a_0$ to $a_2$):\n\n::: {#d2a583c0 .cell execution_count=8}\n``` {.python .cell-code}\nprint(QL_quadratic_model.named_steps[\"linear\"].coef_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[8.47e+02 3.11e+01 3.40e-01]\n```\n:::\n:::\n\n\nHence, this polynomial seems to work fine, even though we have very few data points; with more data points in a test apparatus, this same model could be retrained, making the coefficients more and more accurate. \n\nThe advantage of this approach is that, if we are working with this compressor and selecting heat exchangers sizes, for instance, we do not need to evaluate thermophysical properties at each iteration but only a polynomial, which is a huge time saver. How to make this integration between models is the subject of another post.\n\n## References\n\n[1]: Stoecker, W. F. Design of thermal systems. [sl]: McGraw-Hill, 1980.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}