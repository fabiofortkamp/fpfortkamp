{
  "hash": "50670ab4573f95782d302dc3db162e74",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: First Law Analysis of a Mixture of Ideal Gases - Exercise 13-97 from Çengel's\n  Thermodynamics book (7th ed)\nauthor: Fábio P. Fortkamp\ndate: '2022-03-15T20:16:34-03:00'\nslug: first\ncategories:\n  - Exercise from Çengel's Thermodynamics\ntags:\n  - mixture thermodynamics\n  - thermodynamics\n---\n\nThis is exercise 13-97 from [1]: a mixture of gases composed of 55% of nitrogen gas and 45% of carbon dioxide (in mass) is originally at 200 kPa and 45 ˚C. The system is heated up and expands, but due to the action of a spring, the pressure variation as a function of volume $P(\\mathcal{V})$ follows:\n\n$$\nP = A + K \\mathcal{V}\n$$\nwhere $A = 111.111\\,\\mathrm{kPa}$ and $K = 888.89\\,\\mathrm{kPa/m^3}$. During the heating, volume doubles; what is the work and heat transfers associated with the process?\n\nFor that, in contrast with the [previous](https://fpfortkamp.com/post/mixture/) [posts](https://fpfortkamp.com/post/isothermic/), now we'll use Python and the [`pyromat`](http://pyromat.org) package, which I've just discovered today. \n\nWith the added heat, the system will expand and perform work, which can be calculated using only mechanics:\n\n$$\nW = \\int_{\\mathcal{V}_1}^{\\mathcal{V}_2} P \\mathrm{d}\\mathcal{V}\n$$\n\nWhere the initial volume can be obtained from the given pressure variation, and the final volume is double that:\n\n::: {#40ff6331 .cell execution_count=1}\n``` {.python .cell-code}\nA = 111.111\nK = 888.89\n\nP1 = 200\nV1 = (P1-A)/K\nprint(\"V1 = %.2f m3\" %(V1))\nV2 = 2*V1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nV1 = 0.10 m3\n```\n:::\n:::\n\n\nThe integration above gives:\n\n$$\nW = A * (\\mathcal{V}_2 - \\mathcal{V}_1) + \\frac{K}{2}\\left(\\mathcal{V}_2^2 - \\mathcal{V}_1^2\\right)\n$$\n\nand calculating it:\n\n::: {#d7dc0922 .cell execution_count=2}\n``` {.python .cell-code}\nW = A*(V2-V1) + K/2*(V2**2 - V1**2)\nprint(\"W = %.2f kJ\" %(W,))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nW = 24.44 kJ\n```\n:::\n:::\n\n\nTo compute the heat *added* to the system, a First Law analysis reads:\n\n$$\nQ = W + \\Delta U = W + m c_v (T_2-T_1)\n$$\n\nwhere, assuming a mixture of ideal gases (an hypothesis not used so far!), all mass-specific properties are additive. The gas constant is:\n\n$$\nR = \\sum_{i=1}^k x_i R_i\n$$\nwhere $k = 2$ components, $x_i$ is the individual mass fraction and $R_i$ the individual gas constant. The gas constant is needed to compute the temperature variation; at state 1, the mass (which is constant in all states for a closed system) is computed from the ideal gas equation of state:\n\n$$\nm = \\frac{P_1 V_1}{R T_1}\n$$\n\nand now, applying the same equation for state 2:\n\n$$\nT_2 = \\frac{P_2 V_2}{m R}\n$$\n\nwhere $P_2$ can be obtained from the pressure-volume equation.\n\nThe constant-volume specific heat for ideal gases is a function of temperature only, and for better accuracy can be calculated at the average temperature. The mixture specific heat is computed similarly to the gas constant above.\n\nThe `pyromat` library has function to create ideal gas \"objects\" and then access constants and functions as illustrated below:\n\n::: {#cfb179bf .cell execution_count=3}\n``` {.python .cell-code}\nimport pyromat as pm\nN2 = pm.get(\"ig.N2\") # ig = ideal gas model\nCO2 = pm.get(\"ig.CO2\")\n\nxN2 = 0.55\nxCO2 = 1-xN2\n\n# each object has a .R() method to calculate the gas constant\n# the default units are kJ, kPa, m3, K, kmol\nR = xN2*N2.R() + xCO2*CO2.R()\n\nT1 = 45 + 273\nm = (P1*V1)/(R*T1)\n\nP2 = A + K*V2\nT2 = (P2*V2)/(m*R)\n\nTmean = (T1 + T2)/2\n\ncv = xN2*N2.cv(T=Tmean) + xCO2*CO2.cv(T=Tmean)\n\nQ = W + m*cv*(T2-T1)\nprint(\"Q = %.2f kJ\" %(Q,))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nQ = 151.26 kJ\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_205294/1406596206.py:23: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  print(\"Q = %.2f kJ\" %(Q,))\n```\n:::\n:::\n\n\n## References \n\n[1]: Çengel, Y. A., & Boles, M. A. Termodinâmica (7 ed.). Porto Alegre: AMGH, 2013.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}